{"version":3,"sources":["../../src/Toast/index.jsx"],"names":["React","useState","PropTypes","faTimes","BaseToast","ToastContainer","Button","IconButton","Toast","action","children","closeLabel","delay","onClose","show","autoHide","setAutoHide","href","onClick","label","defaultProps","propTypes","string","isRequired","func","bool","shape","number"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,OAAT,QAAwB,mCAAxB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,UAAP,MAAuB,eAAvB;;AAEA,SAASC,KAAT,OAEG;AAAA,MADDC,MACC,QADDA,MACC;AAAA,MADOC,QACP,QADOA,QACP;AAAA,MADiBC,UACjB,QADiBA,UACjB;AAAA,MAD6BC,KAC7B,QAD6BA,KAC7B;AAAA,MADoCC,OACpC,QADoCA,OACpC;AAAA,MAD6CC,IAC7C,QAD6CA,IAC7C;;AACD,kBAAgCb,QAAQ,CAAC,IAAD,CAAxC;AAAA;AAAA,MAAOc,QAAP;AAAA,MAAiBC,WAAjB;;AACA,sBACE,oBAAC,cAAD,qBACE,oBAAC,SAAD;AACE,IAAA,QAAQ,EAAED,QADZ;AAEE,IAAA,SAAS,EAAC,OAFZ;AAGE,IAAA,KAAK,EAAEH,KAHT;AAIE,IAAA,OAAO,EAAEC,OAJX;AAKE,IAAA,MAAM,EAAE;AAAA,aAAMG,WAAW,CAAC,IAAD,CAAjB;AAAA,KALV;AAME,IAAA,OAAO,EAAE;AAAA,aAAMA,WAAW,CAAC,KAAD,CAAjB;AAAA,KANX;AAOE,IAAA,UAAU,EAAE;AAAA,aAAMA,WAAW,CAAC,IAAD,CAAjB;AAAA,KAPd;AAQE,IAAA,WAAW,EAAE;AAAA,aAAMA,WAAW,CAAC,KAAD,CAAjB;AAAA,KARf;AASE,IAAA,IAAI,EAAEF;AATR,kBAWE;AACE,IAAA,SAAS,EAAC;AADZ,kBAGE;AAAG,IAAA,SAAS,EAAC;AAAb,KAAsBJ,QAAtB,CAHF,eAIE;AAAK,IAAA,SAAS,EAAC;AAAf,kBACE,oBAAC,UAAD;AACE,IAAA,GAAG,EAAEC,UADP;AAEE,IAAA,SAAS,EAAC,kBAFZ;AAGE,IAAA,IAAI,EAAER,OAHR;AAIE,IAAA,OAAO,EAAE;AAAA,aAAOU,OAAO,EAAd;AAAA,KAJX;AAKE,IAAA,OAAO,EAAC,SALV;AAME,IAAA,YAAY;AANd,IADF,CAJF,CAXF,EA0BGJ,MAAM,iBACL,oBAAC,MAAD;AACE,IAAA,EAAE,EAAEA,MAAM,CAACQ,IAAP,GAAc,GAAd,GAAoB,QAD1B;AAEE,IAAA,IAAI,EAAER,MAAM,CAACQ,IAFf;AAGE,IAAA,OAAO,EAAER,MAAM,CAACS,OAHlB;AAIE,IAAA,IAAI,EAAC,IAJP;AAKE,IAAA,OAAO,EAAC;AALV,KAOGT,MAAM,CAACU,KAPV,CA3BJ,CADF,CADF;AA0CD;;AAEDX,KAAK,CAACY,YAAN,GAAqB;AACnBX,EAAAA,MAAM,EAAE,IADW;AAEnBE,EAAAA,UAAU,EAAE,OAFO;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB;AAMAJ,KAAK,CAACa,SAAN,GAAkB;AAChB;AACAX,EAAAA,QAAQ,EAAER,SAAS,CAACoB,MAAV,CAAiBC,UAFX;;AAGhB;AACF;AACA;AACA;AACA;AACEV,EAAAA,OAAO,EAAEX,SAAS,CAACsB,IAAV,CAAeD,UARR;;AAShB;AACAT,EAAAA,IAAI,EAAEZ,SAAS,CAACuB,IAAV,CAAeF,UAVL;;AAWhB;AACF;AACA;AACA;AACA;AACA;AACEd,EAAAA,MAAM,EAAEP,SAAS,CAACwB,KAAV,CAAgB;AACtBP,IAAAA,KAAK,EAAEjB,SAAS,CAACoB,MAAV,CAAiBC,UADF;AAEtBN,IAAAA,IAAI,EAAEf,SAAS,CAACoB,MAFM;AAGtBJ,IAAAA,OAAO,EAAEhB,SAAS,CAACsB;AAHG,GAAhB,CAjBQ;;AAsBhB;AACF;AACA;AACA;AACEb,EAAAA,UAAU,EAAET,SAAS,CAACoB,MA1BN;;AA2BhB;AACAV,EAAAA,KAAK,EAAEV,SAAS,CAACyB;AA5BD,CAAlB;AA+BA,eAAenB,KAAf","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport BaseToast from 'react-bootstrap/Toast';\nimport ToastContainer from './ToastContainer';\nimport Button from '../Button';\nimport IconButton from '../IconButton';\n\nfunction Toast({\n  action, children, closeLabel, delay, onClose, show,\n}) {\n  const [autoHide, setAutoHide] = useState(true);\n  return (\n    <ToastContainer>\n      <BaseToast\n        autohide={autoHide}\n        className=\"toast\"\n        delay={delay}\n        onClose={onClose}\n        onBlur={() => setAutoHide(true)}\n        onFocus={() => setAutoHide(false)}\n        onMouseOut={() => setAutoHide(true)}\n        onMouseOver={() => setAutoHide(false)}\n        show={show}\n      >\n        <div\n          className=\"toast-header\"\n        >\n          <p className=\"small\">{children}</p>\n          <div className=\"toast-header-btn-container\">\n            <IconButton\n              alt={closeLabel}\n              className=\"align-self-start\"\n              icon={faTimes}\n              onClick={() => (onClose())}\n              variant=\"primary\"\n              invertColors\n            />\n          </div>\n        </div>\n        {action && (\n          <Button\n            as={action.href ? 'a' : 'button'}\n            href={action.href}\n            onClick={action.onClick}\n            size=\"sm\"\n            variant=\"inverse-outline-primary\"\n          >\n            {action.label}\n          </Button>\n        )}\n      </BaseToast>\n    </ToastContainer>\n  );\n}\n\nToast.defaultProps = {\n  action: null,\n  closeLabel: 'Close',\n  delay: 5000,\n};\n\nToast.propTypes = {\n  /** A string or an element that is rendered inside the main body of the `Toast`. */\n  children: PropTypes.string.isRequired,\n  /**\n   * A function that is called on close. It can be used to perform\n   * actions upon closing of the `Toast`, such as setting the \"show\"\n   * element to false.\n   * */\n  onClose: PropTypes.func.isRequired,\n  /** Boolean used to control whether the `Toast` shows */\n  show: PropTypes.bool.isRequired,\n  /**\n   * Fields used to build optional action button.\n   * `label` is a string rendered inside the button.\n   * `href` is a link that will render the action button as an anchor tag.\n   * `onClick` is a function that is called when the button is clicked.\n   */\n  action: PropTypes.shape({\n    label: PropTypes.string.isRequired,\n    href: PropTypes.string,\n    onClick: PropTypes.func,\n  }),\n  /**\n   * Alt text for the `Toast`'s dismiss button. The recommended use is an i18n value.\n   * The default is an English string.\n   */\n  closeLabel: PropTypes.string,\n  /** Time in milliseconds for which the `Toast` will display. */\n  delay: PropTypes.number,\n};\n\nexport default Toast;\n"],"file":"index.js"}