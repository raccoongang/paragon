{"version":3,"sources":["../../src/Toast/index.jsx"],"names":["React","useState","PropTypes","faTimes","BaseToast","injectIntl","ToastContainer","Button","IconButton","Toast","action","children","closeLabel","delay","onClose","show","intl","autoHide","setAutoHide","intlCloseLabel","formatMessage","id","defaultMessage","description","href","onClick","label","defaultProps","propTypes","string","isRequired","func","bool","shape","number"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport BaseToast from 'react-bootstrap/Toast';\nimport { injectIntl } from 'react-intl';\n\nimport ToastContainer from './ToastContainer';\nimport { Button, IconButton } from '..';\n\nfunction Toast({\n  action, children, closeLabel, delay, onClose, show, intl,\n}) {\n  const [autoHide, setAutoHide] = useState(true);\n  const intlCloseLabel = intl.formatMessage({\n    id: 'pgn.Toast.closeLabel',\n    defaultMessage: closeLabel,\n    description: 'Close label for Toast component',\n  });\n  return (\n    <ToastContainer>\n      <BaseToast\n        autohide={autoHide}\n        className=\"toast\"\n        delay={delay}\n        onClose={onClose}\n        onBlur={() => setAutoHide(true)}\n        onFocus={() => setAutoHide(false)}\n        onMouseOut={() => setAutoHide(true)}\n        onMouseOver={() => setAutoHide(false)}\n        show={show}\n      >\n        <div\n          className=\"toast-header\"\n        >\n          <p className=\"small\">{children}</p>\n          <div className=\"toast-header-btn-container\">\n            <IconButton\n              alt={intlCloseLabel}\n              className=\"align-self-start\"\n              icon={faTimes}\n              onClick={() => (onClose())}\n              variant=\"primary\"\n              invertColors\n            />\n          </div>\n        </div>\n        {action && (\n          <Button\n            as={action.href ? 'a' : 'button'}\n            href={action.href}\n            onClick={action.onClick}\n            size=\"sm\"\n            variant=\"inverse-outline-primary\"\n          >\n            {action.label}\n          </Button>\n        )}\n      </BaseToast>\n    </ToastContainer>\n  );\n}\n\nToast.defaultProps = {\n  action: null,\n  closeLabel: 'Close',\n  delay: 5000,\n};\n\nToast.propTypes = {\n  /** A string or an element that is rendered inside the main body of the `Toast`. */\n  children: PropTypes.string.isRequired,\n  /**\n   * A function that is called on close. It can be used to perform\n   * actions upon closing of the `Toast`, such as setting the \"show\"\n   * element to false.\n   * */\n  onClose: PropTypes.func.isRequired,\n  /** Boolean used to control whether the `Toast` shows */\n  show: PropTypes.bool.isRequired,\n  /**\n   * Fields used to build optional action button.\n   * `label` is a string rendered inside the button.\n   * `href` is a link that will render the action button as an anchor tag.\n   * `onClick` is a function that is called when the button is clicked.\n   */\n  action: PropTypes.shape({\n    label: PropTypes.string.isRequired,\n    href: PropTypes.string,\n    onClick: PropTypes.func,\n  }),\n  /**\n   * Alt text for the `Toast`'s dismiss button. The recommended use is an i18n value.\n   * The default is an English string.\n   */\n  closeLabel: PropTypes.string,\n  /** Time in milliseconds for which the `Toast` will display. */\n  delay: PropTypes.number,\n  intl: PropTypes.shape.isRequired,\n};\n\nexport default injectIntl(Toast);\n"],"file":"index.js"}