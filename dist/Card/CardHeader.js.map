{"version":3,"sources":["../../src/Card/CardHeader.jsx"],"names":["React","useCallback","PropTypes","classNames","CardHeader","forwardRef","ref","actions","className","size","subtitle","title","cloneActions","Action","isValidElement","children","props","addtlActionProps","Array","isArray","map","cloneElement","propTypes","node","string","isRequired","oneOf","defaultProps"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,IAAMC,UAAU,gBAAGJ,KAAK,CAACK,UAAN,CAAiB,gBAMjCC,GANiC,EAMzB;AAAA,MALTC,OAKS,QALTA,OAKS;AAAA,MAJTC,SAIS,QAJTA,SAIS;AAAA,MAHTC,IAGS,QAHTA,IAGS;AAAA,MAFTC,QAES,QAFTA,QAES;AAAA,MADTC,KACS,QADTA,KACS;AACT,MAAMC,YAAY,GAAGX,WAAW,CAC9B,UAACY,MAAD,EAAY;AACV,sBAAIb,KAAK,CAACc,cAAN,CAAqBD,MAArB,CAAJ,EAAkC;AAChC,UAAQE,QAAR,GAAqBF,MAAM,CAACG,KAA5B,CAAQD,QAAR;AACA,UAAME,gBAAgB,GAAG;AACvBR,QAAAA,IAAI,EAAJA,IADuB;AAEvBM,QAAAA,QAAQ,EAAEG,KAAK,CAACC,OAAN,CAAcJ,QAAd,IAA0BA,QAAQ,CAACK,GAAT,CAAaR,YAAb,CAA1B,GAAuDA,YAAY,CAACG,QAAD;AAFtD,OAAzB;AAIA,0BAAOf,KAAK,CAACqB,YAAN,CAAmBR,MAAnB,EAA2BI,gBAA3B,CAAP;AACD;;AAED,WAAOJ,MAAP;AACD,GAZ6B,EAa9B,CAACJ,IAAD,CAb8B,CAAhC;AAgBA,sBACE;AAAK,IAAA,SAAS,EAAEN,UAAU,CAAC,kBAAD,EAAqBK,SAArB,CAA1B;AAA2D,IAAA,GAAG,EAAEF;AAAhE,kBACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACGK,KAAK,iBAAI;AAAK,IAAA,SAAS,mCAA4BF,IAA5B;AAAd,KAAmDE,KAAnD,CADZ,EAEGD,QAAQ,iBAAI;AAAK,IAAA,SAAS,sCAA+BD,IAA/B;AAAd,KAAsDC,QAAtD,CAFf,CADF,EAKGH,OAAO,iBAEN;AAAK,IAAA,SAAS,EAAC;AAAf,KACGE,IAAI,KAAK,IAAT,GAAgBG,YAAY,CAACL,OAAD,CAA5B,GAAwCA,OAD3C,CAPJ,CADF;AAcD,CArCkB,CAAnB;AAuCAH,UAAU,CAACkB,SAAX,GAAuB;AACrB;AACF;AACA;AACEf,EAAAA,OAAO,EAAEL,SAAS,CAACqB,IAJE;;AAKrB;AACAf,EAAAA,SAAS,EAAEN,SAAS,CAACsB,MANA;;AAOrB;AACAb,EAAAA,KAAK,EAAET,SAAS,CAACqB,IAAV,CAAeE,UARD;;AASrB;AACAhB,EAAAA,IAAI,EAAEP,SAAS,CAACwB,KAAV,CAAgB,CAAC,IAAD,EAAO,IAAP,CAAhB,CAVe;;AAWrB;AACAhB,EAAAA,QAAQ,EAAER,SAAS,CAACqB;AAZC,CAAvB;AAeAnB,UAAU,CAACuB,YAAX,GAA0B;AACxBpB,EAAAA,OAAO,EAAE,IADe;AAExBC,EAAAA,SAAS,EAAE,IAFa;AAGxBC,EAAAA,IAAI,EAAE,IAHkB;AAIxBC,EAAAA,QAAQ,EAAE;AAJc,CAA1B;AAOA,eAAeN,UAAf","sourcesContent":["import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst CardHeader = React.forwardRef(({\n  actions,\n  className,\n  size,\n  subtitle,\n  title,\n}, ref) => {\n  const cloneActions = useCallback(\n    (Action) => {\n      if (React.isValidElement(Action)) {\n        const { children } = Action.props;\n        const addtlActionProps = {\n          size,\n          children: Array.isArray(children) ? children.map(cloneActions) : cloneActions(children),\n        };\n        return React.cloneElement(Action, addtlActionProps);\n      }\n\n      return Action;\n    },\n    [size],\n  );\n\n  return (\n    <div className={classNames('pgn__card-header', className)} ref={ref}>\n      <div className=\"pgn__card-header-content\">\n        {title && <div className={`pgn__card-header-title-${size}`}>{title}</div>}\n        {subtitle && <div className={`pgn__card-header-subtitle-${size}`}>{subtitle}</div>}\n      </div>\n      {actions\n        && (\n        <div className=\"pgn__card-header-actions\">\n          {size !== 'md' ? cloneActions(actions) : actions}\n        </div>\n        )}\n    </div>\n  );\n});\n\nCardHeader.propTypes = {\n  /** Optional node to render on the top right of the card header,\n   *  i.e. ActionRow or a DropdownMenu.\n   * */\n  actions: PropTypes.node,\n  /** The class name for the CardHeader component */\n  className: PropTypes.string,\n  /** The title for the CardHeader component */\n  title: PropTypes.node.isRequired,\n  /** The size of the CardHeader component */\n  size: PropTypes.oneOf(['sm', 'md']),\n  /** The subtitle of the CardHeader component */\n  subtitle: PropTypes.node,\n};\n\nCardHeader.defaultProps = {\n  actions: null,\n  className: null,\n  size: 'md',\n  subtitle: null,\n};\n\nexport default CardHeader;\n"],"file":"CardHeader.js"}