{"version":3,"sources":["../../src/IconButton/index.jsx"],"names":["React","PropTypes","classNames","FontAwesomeIcon","OverlayTrigger","Tooltip","IconButton","forwardRef","ref","alt","invertColors","icon","src","iconClassNames","onClick","size","variant","iconAs","isActive","attrs","invert","activeStyle","process","env","NODE_ENV","console","warn","IconComponent","className","defaultProps","undefined","propTypes","elementType","oneOfType","element","func","string","isRequired","bool","shape","prefix","iconName","array","oneOf","IconButtonWithTooltip","tooltipPlacement","tooltipContent","props","node"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { OverlayTrigger, Tooltip } from '..';\n\nconst IconButton = React.forwardRef(({\n  alt,\n  invertColors,\n  icon,\n  src,\n  iconClassNames,\n  onClick,\n  size,\n  variant,\n  iconAs,\n  isActive,\n  ...attrs\n}, ref) => {\n  const invert = invertColors ? 'inverse-' : '';\n  const activeStyle = isActive ? `${variant}-` : '';\n  if (!iconAs && process.env.NODE_ENV === 'development' && console) {\n    // eslint-disable-next-line no-console\n    console.warn('[Deprecated] IconButton: you have not provided a value for iconAs prop and are using a default one - FontAwesomeIcon, the default value is to be changed soon as Paragon is moving away from FontAwesome, please use Paragon\\'s icons instead.');\n  }\n  const IconComponent = iconAs || FontAwesomeIcon;\n  return (\n    <button\n      {...attrs}\n      aria-label={alt}\n      className={classNames(\n        'btn-icon',\n        `btn-icon-${invert}${variant}`,\n        `btn-icon-${size}`,\n        {\n          [`btn-icon-${invert}${activeStyle}active`]: isActive,\n        },\n        attrs.className,\n      )}\n      onClick={onClick}\n      type=\"button\"\n      ref={ref}\n    >\n      <span className=\"btn-icon__icon-container\">\n        <IconComponent\n          className={classNames('btn-icon__icon', iconClassNames)}\n          icon={icon}\n          src={src}\n        />\n      </span>\n    </button>\n  );\n});\n\nIconButton.defaultProps = {\n  iconAs: undefined,\n  src: null,\n  icon: {},\n  iconClassNames: '',\n  invertColors: false,\n  variant: 'primary',\n  size: 'md',\n  onClick: () => {},\n  isActive: false,\n};\n\nIconButton.propTypes = {\n  /** Component that renders the icon, currently defaults to `FontAwesomeIcon`,\n   *  but is going to be deprecated soon, please use Paragon's icons instead. */\n  iconAs: PropTypes.elementType,\n  /** An icon component to render. Example import of a Paragon icon component:\n   * `import { Check } from '@edx/paragon/dist/icon';`\n   * */\n  src: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),\n  /** Alt text for your icon. For best practice, avoid using alt text to describe\n   * the image in the `IconButton`. Instead, we recommend describing the function\n   * of the button. */\n  alt: PropTypes.string.isRequired,\n  /** Changes icon styles for dark background */\n  invertColors: PropTypes.bool,\n  /** Accepts a React fontawesome icon. https://fontawesome.com/how-to-use/on-the-web/using-with/react */\n  icon: PropTypes.shape({\n    prefix: PropTypes.string,\n    iconName: PropTypes.string,\n    // eslint-disable-next-line react/forbid-prop-types\n    icon: PropTypes.array,\n  }),\n  /** Extra class names that will be added to the icon */\n  iconClassNames: PropTypes.string,\n  /** Click handler for the button */\n  onClick: PropTypes.func,\n  /** Type of button (uses Bootstrap options) */\n  variant: PropTypes.oneOf(['primary', 'secondary', 'success', 'warning', 'danger', 'light', 'dark', 'black', 'brand']),\n  /** size of button to render */\n  size: PropTypes.oneOf(['sm', 'md', 'inline']),\n  /** whether to show the `IconButton` in an active state, whose styling is distinct from default state */\n  isActive: PropTypes.bool,\n};\n\n/**\n *\n * @param { object } args Arguments\n * @param { string } args.tooltipPlacement choose from https://popper.js.org/docs/v2/constructors/#options\n * @param { React.Component } args.tooltipContent any content to pass to tooltip content area\n * @returns { IconButton } a button wrapped in overlaytrigger\n */\nconst IconButtonWithTooltip = ({\n  tooltipPlacement, tooltipContent, variant, invertColors, ...props\n}) => {\n  const invert = invertColors ? 'inverse-' : '';\n  return (\n    <OverlayTrigger\n      placement={tooltipPlacement}\n      overlay={(\n        <Tooltip\n          id={`iconbutton-tooltip-${tooltipPlacement}`}\n          variant={invert ? 'light' : ''}\n        >\n          {tooltipContent}\n        </Tooltip>\n      )}\n    >\n      <IconButton variant={variant} invertColors={invertColors} {...props} />\n    </OverlayTrigger>\n  );\n};\n\nIconButtonWithTooltip.defaultProps = {\n  tooltipPlacement: 'top',\n  variant: 'primary',\n  invertColors: false,\n};\n\nIconButtonWithTooltip.propTypes = {\n  /** tooltip placement can be top, left, right etc, per https://popper.js.org/docs/v2/constructors/#options  */\n  tooltipPlacement: PropTypes.string,\n  /** any valid JSX or text to be rendered as tooltip contents */\n  tooltipContent: PropTypes.node.isRequired,\n  /** Type of button (uses Bootstrap options) */\n  variant: PropTypes.oneOf(['primary', 'secondary', 'success', 'warning', 'danger', 'light', 'dark', 'black', 'brand']),\n  /** Changes icon styles for dark background */\n  invertColors: PropTypes.bool,\n};\n\nIconButton.IconButtonWithTooltip = IconButtonWithTooltip;\n\nexport default IconButton;\nexport { IconButtonWithTooltip };\n"],"file":"index.js"}