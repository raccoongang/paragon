{"version":3,"sources":["../../../src/DataTable/filters/MultiSelectDropdownFilter.jsx"],"names":["React","useRef","useMemo","PropTypes","DropdownButton","Badge","newId","LabelledCheckbox","MultiSelectDropdownFilter","column","setFilter","Header","filterChoices","getHeaderProps","filterValue","ariaLabel","key","checkedBoxes","changeCheckbox","value","includes","newCheckedBoxes","filter","val","push","headerBasedId","current","map","name","number","propTypes","shape","func","isRequired","oneOfType","node","arrayOf","string"],"mappings":"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","sourcesContent":["import React, { useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  DropdownButton,\n  Badge,\n} from '../..';\nimport { newId } from '../../utils';\nimport LabelledCheckbox from './LabelledCheckbox';\n\nfunction MultiSelectDropdownFilter({\n  column: {\n    setFilter, Header, filterChoices, getHeaderProps, filterValue,\n  },\n}) {\n  // creates a unique label that does not change on re-render in case there are multiple checkbox filters in the dom\n  const ariaLabel = useRef(newId(`multi-dropdown-filter-label-${getHeaderProps().key}-`));\n  const checkedBoxes = filterValue || [];\n  const changeCheckbox = (value) => {\n    if (checkedBoxes.includes(value)) {\n      const newCheckedBoxes = checkedBoxes.filter((val) => val !== value);\n      return setFilter(newCheckedBoxes);\n    }\n    checkedBoxes.push(value);\n    return setFilter(checkedBoxes);\n  };\n  const headerBasedId = useMemo(() => `checkbox-filter-check-${getHeaderProps().key}-`, [getHeaderProps]);\n  return (\n    <DropdownButton variant=\"outline-primary\" id={ariaLabel.current} title={Header}>\n      <div role=\"group\" aria-label={Header} className=\"pgn__dropdown-filter-checkbox-group\">\n        {filterChoices.map(({ name, number, value }) => (\n          <LabelledCheckbox\n            key={name}\n            id={headerBasedId}\n            checked={checkedBoxes.includes(value)}\n            onChange={() => { changeCheckbox(value); }}\n            label={<>{name} {number && <Badge variant=\"light\">{number}</Badge>}</>}\n          />\n        ))}\n      </div>\n    </DropdownButton>\n  );\n}\n\nMultiSelectDropdownFilter.propTypes = {\n  /**\n   * Specifies a column object.\n   *\n   * `setFilter`: Function to set the filter value.\n   *\n   * `Header`: Column header used for labels and placeholders.\n   *\n   * `filterChoices`: Specifies array of choices.\n   *\n   * `getHeaderProps`: Generates a key unique to the column being filtered.\n   *\n   * `filterValue`: Value for the filter input.\n   */\n  column: PropTypes.shape({\n    /** Function to set the filter value */\n    setFilter: PropTypes.func.isRequired,\n    /** Column header used for labels and placeholders */\n    Header: PropTypes.oneOfType([PropTypes.func, PropTypes.node]).isRequired,\n    /** Names and values for the select options */\n    filterChoices: PropTypes.arrayOf(PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.number,\n      value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n    })).isRequired,\n    /** Generates a key unique to the column being filtered */\n    getHeaderProps: PropTypes.func.isRequired,\n    filterValue: PropTypes.arrayOf([PropTypes.number, PropTypes.string]),\n  }).isRequired,\n};\n\nexport default MultiSelectDropdownFilter;\n"],"file":"MultiSelectDropdownFilter.js"}