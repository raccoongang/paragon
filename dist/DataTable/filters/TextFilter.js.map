{"version":3,"sources":["../../../src/DataTable/filters/TextFilter.jsx"],"names":["React","useRef","PropTypes","Form","FormLabel","Input","newId","TextFilter","column","filterValue","setFilter","Header","getHeaderProps","ariaLabel","key","inputText","current","e","target","value","undefined","propTypes","shape","func","isRequired","oneOfType","node","string"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,KAAT,QAAsB,aAAtB;;AAEA,SAASC,UAAT,OAIG;AAAA,yBAHDC,MAGC;AAAA,MAFCC,WAED,eAFCA,WAED;AAAA,MAFcC,SAEd,eAFcA,SAEd;AAAA,MAFyBC,MAEzB,eAFyBA,MAEzB;AAAA,MAFiCC,cAEjC,eAFiCA,cAEjC;AACD,MAAMC,SAAS,GAAGZ,MAAM,CAACK,KAAK,6BAAsBM,cAAc,GAAGE,GAAvC,OAAN,CAAxB;AACA,MAAMC,SAAS,oBAAaJ,MAAb,CAAf;AACA,sBACE,oBAAC,IAAD,CAAM,KAAN,qBACE,oBAAC,SAAD;AAAW,IAAA,EAAE,EAAEE,SAAS,CAACG,OAAzB;AAAkC,IAAA,SAAS,EAAC;AAA5C,KAAuDD,SAAvD,CADF,eAEE,oBAAC,KAAD;AACE,uBAAiBF,SAAS,CAACG,OAD7B;AAEE,IAAA,KAAK,EAAEP,WAAW,IAAI,EAFxB;AAGE,IAAA,IAAI,EAAC,MAHP;AAIE,IAAA,QAAQ,EAAE,kBAAAQ,CAAC,EAAI;AACbP,MAAAA,SAAS,CAACO,CAAC,CAACC,MAAF,CAASC,KAAT,IAAkBC,SAAnB,CAAT,CADa,CAC2B;AACzC,KANH;AAOE,IAAA,WAAW,EAAEL;AAPf,IAFF,CADF;AAcD;;AAEDR,UAAU,CAACc,SAAX,GAAuB;AACrB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEb,EAAAA,MAAM,EAAEN,SAAS,CAACoB,KAAV,CAAgB;AACtBZ,IAAAA,SAAS,EAAER,SAAS,CAACqB,IAAV,CAAeC,UADJ;AAEtBb,IAAAA,MAAM,EAAET,SAAS,CAACuB,SAAV,CAAoB,CAACvB,SAAS,CAACqB,IAAX,EAAiBrB,SAAS,CAACwB,IAA3B,CAApB,EAAsDF,UAFxC;AAGtBZ,IAAAA,cAAc,EAAEV,SAAS,CAACqB,IAAV,CAAeC,UAHT;AAItBf,IAAAA,WAAW,EAAEP,SAAS,CAACyB;AAJD,GAAhB,EAKLH;AAjBkB,CAAvB;AAoBA,eAAejB,UAAf","sourcesContent":["import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport Form from '../../Form';\nimport FormLabel from '../../Form/FormLabel';\nimport Input from '../../Input';\nimport { newId } from '../../utils';\n\nfunction TextFilter({\n  column: {\n    filterValue, setFilter, Header, getHeaderProps,\n  },\n}) {\n  const ariaLabel = useRef(newId(`text-filter-label-${getHeaderProps().key}-`));\n  const inputText = `Search ${Header}`;\n  return (\n    <Form.Group>\n      <FormLabel id={ariaLabel.current} className=\"sr-only\">{inputText}</FormLabel>\n      <Input\n        aria-labelledby={ariaLabel.current}\n        value={filterValue || ''}\n        type=\"text\"\n        onChange={e => {\n          setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n        }}\n        placeholder={inputText}\n      />\n    </Form.Group>\n  );\n}\n\nTextFilter.propTypes = {\n  /**\n   * Specifies a column object.\n   *\n   * `setFilter`: Function to set the filter value.\n   *\n   * `Header`: Column header used for labels and placeholders.\n   *\n   * `getHeaderProps`: Generates a key unique to the column being filtered.\n   *\n   * `filterValue`: Value for the filter input.\n   */\n  column: PropTypes.shape({\n    setFilter: PropTypes.func.isRequired,\n    Header: PropTypes.oneOfType([PropTypes.func, PropTypes.node]).isRequired,\n    getHeaderProps: PropTypes.func.isRequired,\n    filterValue: PropTypes.string,\n  }).isRequired,\n};\n\nexport default TextFilter;\n"],"file":"TextFilter.js"}