{"version":3,"sources":["../../src/DataTable/TableRow.jsx"],"names":["React","useContext","PropTypes","classNames","TableCell","DataTableContext","TableRow","row","getRowProps","cells","id","isSelected","isExpanded","renderRowSubComponent","visibleColumns","className","map","cell","column","Header","length","propTypes","shape","func","isRequired","arrayOf","string","bool"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAAa;AAAA,MAAVC,GAAU,QAAVA,GAAU;AAC5B,MACEC,WADF,GAEID,GAFJ,CACEC,WADF;AAAA,MACeC,KADf,GAEIF,GAFJ,CACeE,KADf;AAAA,MACsBC,EADtB,GAEIH,GAFJ,CACsBG,EADtB;AAAA,MAC0BC,UAD1B,GAEIJ,GAFJ,CAC0BI,UAD1B;AAAA,MACsCC,UADtC,GAEIL,GAFJ,CACsCK,UADtC;;AAGA,oBAAkDX,UAAU,CAACI,gBAAD,CAA5D;AAAA,MAAQQ,qBAAR,eAAQA,qBAAR;AAAA,MAA+BC,cAA/B,eAA+BA,cAA/B;;AAEA,sBACE,uDACE,0BAAQN,WAAW,CAAC;AAClBO,IAAAA,SAAS,EAAEZ,UAAU,CAAC;AACpB,6BAAuB,IADH;AAEpB,qBAAeQ;AAFK,KAAD;AADH,GAAD,CAAnB,EAOGF,KAAK,CAACO,GAAN,CAAU,UAAAC,IAAI;AAAA,wBAAI,oBAAC,SAAD,eAAeA,IAAf;AAAqB,MAAA,GAAG,YAAKA,IAAI,CAACC,MAAL,CAAYC,MAAjB,SAA0BT,EAA1B;AAAxB,OAAJ;AAAA,GAAd,CAPH,CADF,EAUGE,UAAU,IAAIC,qBAAd,gBACC,6CACE;AAAI,IAAA,OAAO,EAAEC,cAAc,CAACM;AAA5B,KACGP,qBAAqB,CAAC;AAAEN,IAAAA,GAAG,EAAHA;AAAF,GAAD,CADxB,CADF,CADD,GAMG,IAhBN,CADF;AAoBD,CA1BD;;AA4BAD,QAAQ,CAACe,SAAT,GAAqB;AACnB;AACAd,EAAAA,GAAG,EAAEL,SAAS,CAACoB,KAAV,CAAgB;AACnB;AACAd,IAAAA,WAAW,EAAEN,SAAS,CAACqB,IAAV,CAAeC,UAFT;;AAGnB;AACAf,IAAAA,KAAK,EAAEP,SAAS,CAACuB,OAAV,CAAkBvB,SAAS,CAACoB,KAAV,CAAgB,EAAhB,CAAlB,EAAuCE,UAJ3B;;AAKnB;AACAd,IAAAA,EAAE,EAAER,SAAS,CAACwB,MAAV,CAAiBF,UANF;;AAOnB;AACAb,IAAAA,UAAU,EAAET,SAAS,CAACyB,IARH;;AASnB;AACAf,IAAAA,UAAU,EAAEV,SAAS,CAACyB;AAVH,GAAhB,EAWFH;AAbgB,CAArB;AAgBA,eAAelB,QAAf","sourcesContent":["import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport TableCell from './TableCell';\nimport DataTableContext from './DataTableContext';\n\nconst TableRow = ({ row }) => {\n  const {\n    getRowProps, cells, id, isSelected, isExpanded,\n  } = row;\n  const { renderRowSubComponent, visibleColumns } = useContext(DataTableContext);\n\n  return (\n    <>\n      <tr {...getRowProps({\n        className: classNames({\n          'pgn__data-table-row': true,\n          'is-selected': isSelected,\n        }),\n      })}\n      >\n        {cells.map(cell => <TableCell {...cell} key={`${cell.column.Header}${id}`} />)}\n      </tr>\n      {isExpanded && renderRowSubComponent ? (\n        <tr>\n          <td colSpan={visibleColumns.length}>\n            {renderRowSubComponent({ row })}\n          </td>\n        </tr>\n      ) : null}\n    </>\n  );\n};\n\nTableRow.propTypes = {\n  /** Row data that is received from `react-table` API. */\n  row: PropTypes.shape({\n    /** props to include on the tr tag (must include id) */\n    getRowProps: PropTypes.func.isRequired,\n    /** cells in the row */\n    cells: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n    /** row id */\n    id: PropTypes.string.isRequired,\n    /** indicates if row has been selected */\n    isSelected: PropTypes.bool,\n    /** Indicates if row has been expanded. */\n    isExpanded: PropTypes.bool,\n  }).isRequired,\n};\n\nexport default TableRow;\n"],"file":"TableRow.js"}