{"version":3,"sources":["../../src/DataTable/CollapsibleButtonGroup.jsx"],"names":["React","useContext","useMemo","PropTypes","DataTableContext","MoreVert","Dropdown","useWindowSize","Icon","IconButton","breakpoints","Button","DROPDOWN_BUTTON_TEXT","SMALL_SCREEN_DROPDOWN_BUTTON_TEXT","CollapsibleButtonGroup","className","actions","controlledTableSelections","isEntireTableSelected","selectedFlatRows","rows","width","selectedRows","small","minWidth","firstTwoActions","splice","extraActions","slice","reverse","visibleActions","dropdownActions","length","map","action","index","cloneElement","component","key","as","Item","args","props","defaultProps","propTypes","string","arrayOf","shape","oneOfType","func","element","isRequired"],"mappings":"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","sourcesContent":["import React, { useContext, useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport DataTableContext from './DataTableContext';\nimport { MoreVert } from '../../icons';\nimport {\n  Dropdown, useWindowSize, Icon, IconButton, breakpoints, Button,\n} from '..';\n\nexport const DROPDOWN_BUTTON_TEXT = 'More actions';\nexport const SMALL_SCREEN_DROPDOWN_BUTTON_TEXT = 'Actions';\n\nconst CollapsibleButtonGroup = ({\n  className,\n  actions,\n}) => {\n  const {\n    controlledTableSelections: [{ isEntireTableSelected }],\n    selectedFlatRows,\n    rows,\n  } = useContext(DataTableContext);\n  const { width } = useWindowSize();\n  const selectedRows = selectedFlatRows || rows;\n\n  const [visibleActions, dropdownActions] = useMemo(() => {\n    if (width < breakpoints.small.minWidth) {\n      // On a small screen, all actions will be in the overflow menu\n      return [[], [...actions]];\n    }\n    // The first two actions will be displayed as buttons, the rest will go in an overflow menu\n    const firstTwoActions = [...actions].splice(0, 2);\n    const extraActions = [...actions].slice(2);\n\n    /*  Reversing the array because to the user it makes sense to put the primary button first,\n        but we want it on the right */\n    return [firstTwoActions.reverse(), extraActions];\n  }, [actions, width]);\n\n  if (!isEntireTableSelected && !selectedRows) {\n    return null;\n  }\n\n  return (\n    <div className={className}>\n      {dropdownActions.length > 0 && (\n        <Dropdown>\n          <Dropdown.Toggle\n            variant=\"secondary\"\n            iconAs={Icon}\n            as={IconButton}\n            src={MoreVert}\n            alt={width > breakpoints.small.minWidth\n              ? DROPDOWN_BUTTON_TEXT : SMALL_SCREEN_DROPDOWN_BUTTON_TEXT}\n            id=\"actions-dropdown\"\n          />\n          <Dropdown.Menu alignRight>\n            {dropdownActions.map((action, index) => React.cloneElement(\n              action.component,\n              {\n                // eslint-disable-next-line react/no-array-index-key\n                key: `${action}${index}`,\n                as: Dropdown.Item,\n                ...action.args,\n              },\n            ))}\n          </Dropdown.Menu>\n        </Dropdown>\n      )}\n      {visibleActions.map((action, index) => React.cloneElement(\n        action.component,\n        {\n          // eslint-disable-next-line react/no-array-index-key\n          key: `${action}${index}`,\n          as: action.component.props?.as || Button,\n          ...action.args,\n        },\n      ))}\n    </div>\n  );\n};\n\nCollapsibleButtonGroup.defaultProps = {\n  className: null,\n};\n\nCollapsibleButtonGroup.propTypes = {\n  /** Class names for the div wrapping the button components */\n  className: PropTypes.string,\n  /** Array of action objects, containing a component and their callback args */\n  actions: PropTypes.arrayOf(PropTypes.shape({\n    component: PropTypes.oneOfType([PropTypes.func, PropTypes.element]).isRequired,\n    args: PropTypes.shape({}),\n  })).isRequired,\n};\n\nexport default CollapsibleButtonGroup;\n"],"file":"CollapsibleButtonGroup.js"}