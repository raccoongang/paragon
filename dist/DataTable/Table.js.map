{"version":3,"sources":["../../src/DataTable/Table.jsx"],"names":["React","useContext","PropTypes","classNames","injectIntl","Spinner","TableHeaderRow","TableRow","useRows","DataTableContext","Table","isStriped","intl","getTableProps","prepareRow","displayRows","headerGroups","getTableBodyProps","isLoading","renderRows","map","row","id","formatMessage","defaultMessage","description","className","defaultProps","propTypes","bool","shape","isRequired"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,UAAT,QAA2B,YAA3B;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,OAAT,QAAwB,SAAxB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,OAGR;AAAA,MAFJC,SAEI,QAFJA,SAEI;AAAA,MADJC,IACI,QADJA,IACI;;AACJ,iBAEIJ,OAAO,EAFX;AAAA,MACEK,aADF,YACEA,aADF;AAAA,MACiBC,UADjB,YACiBA,UADjB;AAAA,MAC6BC,WAD7B,YAC6BA,WAD7B;AAAA,MAC0CC,YAD1C,YAC0CA,YAD1C;AAAA,MACwDC,iBADxD,YACwDA,iBADxD;;AAGA,oBAAsBhB,UAAU,CAACQ,gBAAD,CAAhC;AAAA,MAAQS,SAAR,eAAQA,SAAR;;AAEA,MAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA,WAAMJ,WAAW,CAACK,GAAZ,CAAgB,UAACC,GAAD,EAAS;AAChDP,MAAAA,UAAU,CAACO,GAAD,CAAV;AACA,0BACE,oBAAC,QAAD;AAAU,QAAA,GAAG,EAAEA,GAAf;AAAoB,QAAA,GAAG,EAAEA,GAAG,CAACC;AAA7B,QADF;AAGD,KALwB,CAAN;AAAA,GAAnB;;AAOA,MAAI,CAACT,aAAL,EAAoB;AAClB,WAAO,IAAP;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAEV,UAAU,CAAC,2BAAD,EAA8B;AAAE,oBAAce;AAAhB,KAA9B;AAA1B,KACGA,SAAS,iBACR;AAAK,IAAA,SAAS,EAAC;AAAf,kBACE,oBAAC,OAAD;AACE,IAAA,SAAS,EAAC,QADZ;AAEE,IAAA,gBAAgB,EAAEN,IAAI,CAACW,aAAL,CAAmB;AACnCD,MAAAA,EAAE,EAAE,sCAD+B;AAEnCE,MAAAA,cAAc,EAAE,SAFmB;AAGnCC,MAAAA,WAAW,EAAE;AAHsB,KAAnB;AAFpB,IADF,CAFJ,eAaE,6BAAWZ,aAAa,CAAC;AACvBa,IAAAA,SAAS,EAAEvB,UAAU,CAAC;AAAE,yBAAmB,IAArB;AAA2B,oBAAcQ;AAAzC,KAAD;AADE,GAAD,CAAxB,eAIE,oBAAC,cAAD;AAAgB,IAAA,YAAY,EAAEK;AAA9B,IAJF,eAKE,6BAAWC,iBAAiB,EAA5B,EACGE,UAAU,EADb,CALF,CAbF,CADF;AAyBD,CA7CD;;AA+CAT,KAAK,CAACiB,YAAN,GAAqB;AACnBhB,EAAAA,SAAS,EAAE;AADQ,CAArB;AAIAD,KAAK,CAACkB,SAAN,GAAkB;AAChB;AACAjB,EAAAA,SAAS,EAAET,SAAS,CAAC2B,IAFL;AAGhBjB,EAAAA,IAAI,EAAEV,SAAS,CAAC4B,KAAV,CAAgBC;AAHN,CAAlB;AAMA,eAAe3B,UAAU,CAACM,KAAD,CAAzB","sourcesContent":["import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { injectIntl } from 'react-intl';\nimport Spinner from '../Spinner';\nimport TableHeaderRow from './TableHeaderRow';\nimport TableRow from './TableRow';\nimport { useRows } from './hooks';\nimport DataTableContext from './DataTableContext';\n\nconst Table = ({\n  isStriped,\n  intl,\n}) => {\n  const {\n    getTableProps, prepareRow, displayRows, headerGroups, getTableBodyProps,\n  } = useRows();\n  const { isLoading } = useContext(DataTableContext);\n\n  const renderRows = () => displayRows.map((row) => {\n    prepareRow(row);\n    return (\n      <TableRow row={row} key={row.id} />\n    );\n  });\n\n  if (!getTableProps) {\n    return null;\n  }\n\n  return (\n    <div className={classNames('pgn__data-table-container', { 'is-loading': isLoading })}>\n      {isLoading && (\n        <div className=\"pgn__data-table-spinner\">\n          <Spinner\n            animation=\"border\"\n            screenReaderText={intl.formatMessage({\n              id: 'pgn.DataTable.Table.loadingStateText',\n              defaultMessage: 'Loading',\n              description: 'Text to display for screen readers when table is in loading state',\n            })}\n          />\n        </div>\n      )}\n      <table {...getTableProps({\n        className: classNames({ 'pgn__data-table': true, 'is-striped': isStriped }),\n      })}\n      >\n        <TableHeaderRow headerGroups={headerGroups} />\n        <tbody {...getTableBodyProps()}>\n          {renderRows()}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nTable.defaultProps = {\n  isStriped: true,\n};\n\nTable.propTypes = {\n  /** should table rows be striped */\n  isStriped: PropTypes.bool,\n  intl: PropTypes.shape.isRequired,\n};\n\nexport default injectIntl(Table);\n"],"file":"Table.js"}