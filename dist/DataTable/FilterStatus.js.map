{"version":3,"sources":["../../src/DataTable/FilterStatus.jsx"],"names":["React","useContext","PropTypes","FormattedMessage","Button","DataTableContext","FilterStatus","className","variant","size","clearFiltersText","buttonClassName","showFilteredFields","state","setAllFilters","filterNames","filters","map","filter","id","filterTexts","join","defaultProps","propTypes","string","bool"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,gBAAT,QAAiC,YAAjC;AACA,SAASC,MAAT,QAAuB,IAAvB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,OAEf;AAAA,MADJC,SACI,QADJA,SACI;AAAA,MADOC,OACP,QADOA,OACP;AAAA,MADgBC,IAChB,QADgBA,IAChB;AAAA,MADsBC,gBACtB,QADsBA,gBACtB;AAAA,MADwCC,eACxC,QADwCA,eACxC;AAAA,MADyDC,kBACzD,QADyDA,kBACzD;;AACJ,oBAAiCX,UAAU,CAACI,gBAAD,CAA3C;AAAA,MAAQQ,KAAR,eAAQA,KAAR;AAAA,MAAeC,aAAf,eAAeA,aAAf;;AACA,MAAI,CAACA,aAAL,EAAoB;AAClB,WAAO,IAAP;AACD;;AAED,MAAMC,WAAW,GAAGF,KAAK,CAACG,OAAN,GAAgBH,KAAK,CAACG,OAAN,CAAcC,GAAd,CAAkB,UAACC,MAAD;AAAA,WAAYA,MAAM,CAACC,EAAnB;AAAA,GAAlB,CAAhB,GAA2D,EAA/E;AACA,MAAMC,WAAW,gBAAG,+CAAgBL,WAAW,CAACM,IAAZ,CAAiB,IAAjB,CAAhB,CAApB;AAEA,sBACE;AAAK,IAAA,SAAS,EAAEd;AAAhB,KACGK,kBAAkB,IAAIQ,WADzB,eAEE,oBAAC,MAAD;AACE,IAAA,SAAS,EAAET,eADb;AAEE,IAAA,OAAO,EAAEH,OAFX;AAGE,IAAA,IAAI,EAAEC,IAHR;AAIE,IAAA,OAAO,EAAE;AAAA,aAAMK,aAAa,CAAC,EAAD,CAAnB;AAAA;AAJX,kBAME,oBAAC,gBAAD;AACE,IAAA,EAAE,EAAC,6CADL;AAEE,IAAA,cAAc,EAAEJ,gBAFlB;AAGE,IAAA,WAAW,EAAC;AAHd,IANF,CAFF,CADF;AAiBD,CA5BD;;AA8BAJ,YAAY,CAACgB,YAAb,GAA4B;AAC1B;AACAf,EAAAA,SAAS,EAAE,IAFe;;AAG1B;AACAI,EAAAA,eAAe,EAAE,0BAJS;;AAK1B;AACAH,EAAAA,OAAO,EAAE,MANiB;;AAO1B;AACAC,EAAAA,IAAI,EAAE,QARoB;;AAS1B;AACAC,EAAAA,gBAAgB,EAAE,eAVQ;;AAW1B;AACAE,EAAAA,kBAAkB,EAAE;AAZM,CAA5B;AAeAN,YAAY,CAACiB,SAAb,GAAyB;AACvBhB,EAAAA,SAAS,EAAEL,SAAS,CAACsB,MADE;AAEvBb,EAAAA,eAAe,EAAET,SAAS,CAACsB,MAFJ;AAGvBhB,EAAAA,OAAO,EAAEN,SAAS,CAACsB,MAHI;AAIvBf,EAAAA,IAAI,EAAEP,SAAS,CAACsB,MAJO;AAKvBd,EAAAA,gBAAgB,EAAER,SAAS,CAACsB,MALL;AAMvBZ,EAAAA,kBAAkB,EAAEV,SAAS,CAACuB;AANP,CAAzB;AASA,eAAenB,YAAf","sourcesContent":["import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport { Button } from '..';\nimport DataTableContext from './DataTableContext';\n\nconst FilterStatus = ({\n  className, variant, size, clearFiltersText, buttonClassName, showFilteredFields,\n}) => {\n  const { state, setAllFilters } = useContext(DataTableContext);\n  if (!setAllFilters) {\n    return null;\n  }\n\n  const filterNames = state.filters ? state.filters.map((filter) => filter.id) : [];\n  const filterTexts = <p>Filtered by {filterNames.join(', ')}</p>;\n\n  return (\n    <div className={className}>\n      {showFilteredFields && filterTexts}\n      <Button\n        className={buttonClassName}\n        variant={variant}\n        size={size}\n        onClick={() => setAllFilters([])}\n      >\n        <FormattedMessage\n          id=\"pgn.DataTable.FilterStatus.clearFiltersText\"\n          defaultMessage={clearFiltersText}\n          description=\"A text that appears on the `Clear filters` button\"\n        />\n      </Button>\n    </div>\n  );\n};\n\nFilterStatus.defaultProps = {\n  /** Specifies class name to append to the base element. */\n  className: null,\n  /** Specifies class name to append to the button. */\n  buttonClassName: 'pgn__smart-status-button',\n  /** The visual style of the `FilterStatus`. */\n  variant: 'link',\n  /** The size of the `FilterStatus`. */\n  size: 'inline',\n  /** A text that appears on the `Clear filters` button. */\n  clearFiltersText: 'Clear Filters',\n  /** Whether to display applied filters. */\n  showFilteredFields: true,\n};\n\nFilterStatus.propTypes = {\n  className: PropTypes.string,\n  buttonClassName: PropTypes.string,\n  variant: PropTypes.string,\n  size: PropTypes.string,\n  clearFiltersText: PropTypes.string,\n  showFilteredFields: PropTypes.bool,\n};\n\nexport default FilterStatus;\n"],"file":"FilterStatus.js"}