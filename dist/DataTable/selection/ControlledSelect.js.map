{"version":3,"sources":["../../../src/DataTable/selection/ControlledSelect.jsx"],"names":["React","useContext","useCallback","useMemo","PropTypes","CheckboxControl","DataTableContext","useConvertIndeterminateProp","deleteSelectedRowAction","addSelectedRowAction","ControlledSelect","row","itemCount","controlledTableSelections","dispatch","toggleSelected","isSelected","id","toggleRowSelectedProps","getToggleRowSelectedProps","updatedProps","propTypes","shape","oneOfType","string","number","isRequired","func","bool"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,WAA5B,EAAyCC,OAAzC,QAAwD,OAAxD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,eAAT,QAAgC,YAAhC;AACA,OAAOC,gBAAP,MAA6B,qBAA7B;AACA,OAAOC,2BAAP,MAAwC,sCAAxC;AAEA,SACEC,uBADF,EAEEC,oBAFF,QAGO,gBAHP;;AAKA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,OAAa;AAAA,MAAVC,GAAU,QAAVA,GAAU;;AACpC,oBAGIV,UAAU,CAACK,gBAAD,CAHd;AAAA,MACEM,SADF,eACEA,SADF;AAAA,yDAEEC,yBAFF;AAAA,MAEgCC,QAFhC;;AAKA,MAAMC,cAAc,GAAGb,WAAW,CAChC,YAAM;AACJ,QAAIS,GAAG,CAACK,UAAR,EAAoB;AAClBF,MAAAA,QAAQ,CAACN,uBAAuB,CAACG,GAAG,CAACM,EAAL,CAAxB,CAAR;AACD,KAFD,MAEO;AACLH,MAAAA,QAAQ,CAACL,oBAAoB,CAACE,GAAD,EAAMC,SAAN,CAArB,CAAR;AACD;AACF,GAP+B,EAQhC,CAACA,SAAD,EAAYD,GAAZ,CARgC,CAAlC;AAWA,MAAMO,sBAAsB,GAAGf,OAAO,CAAC;AAAA,WAAMQ,GAAG,CAACQ,yBAAJ,EAAN;AAAA,GAAD,EAAwC,CAACR,GAAG,CAACQ,yBAAL,CAAxC,CAAtC;AACA,MAAMC,YAAY,GAAGb,2BAA2B,CAACW,sBAAD,CAAhD;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC;AAAf,kBACE,oBAAC,eAAD,eACME,YADN;AAEE,IAAA,QAAQ,EAAEL;AAFZ,KADF,CADF;AAQD,CA5BD;;AA8BAL,gBAAgB,CAACW,SAAjB,GAA6B;AAC3BV,EAAAA,GAAG,EAAEP,SAAS,CAACkB,KAAV,CAAgB;AACnBL,IAAAA,EAAE,EAAEb,SAAS,CAACmB,SAAV,CAAoB,CAACnB,SAAS,CAACoB,MAAX,EAAmBpB,SAAS,CAACqB,MAA7B,CAApB,EAA0DC,UAD3C;AAEnBP,IAAAA,yBAAyB,EAAEf,SAAS,CAACuB,IAAV,CAAeD,UAFvB;AAGnBV,IAAAA,UAAU,EAAEZ,SAAS,CAACwB,IAAV,CAAeF;AAHR,GAAhB,EAIFA;AALwB,CAA7B;AAQA,eAAehB,gBAAf","sourcesContent":["import React, { useContext, useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { CheckboxControl } from '../../Form';\nimport DataTableContext from '../DataTableContext';\nimport useConvertIndeterminateProp from '../utils/useConvertIndeterminateProp';\n\nimport {\n  deleteSelectedRowAction,\n  addSelectedRowAction,\n} from './data/actions';\n\nconst ControlledSelect = ({ row }) => {\n  const {\n    itemCount,\n    controlledTableSelections: [, dispatch],\n  } = useContext(DataTableContext);\n\n  const toggleSelected = useCallback(\n    () => {\n      if (row.isSelected) {\n        dispatch(deleteSelectedRowAction(row.id));\n      } else {\n        dispatch(addSelectedRowAction(row, itemCount));\n      }\n    },\n    [itemCount, row],\n  );\n\n  const toggleRowSelectedProps = useMemo(() => row.getToggleRowSelectedProps(), [row.getToggleRowSelectedProps]);\n  const updatedProps = useConvertIndeterminateProp(toggleRowSelectedProps);\n\n  return (\n    <div className=\"d-flex align-content-center p-1\">\n      <CheckboxControl\n        {...updatedProps}\n        onChange={toggleSelected}\n      />\n    </div>\n  );\n};\n\nControlledSelect.propTypes = {\n  row: PropTypes.shape({\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n    getToggleRowSelectedProps: PropTypes.func.isRequired,\n    isSelected: PropTypes.bool.isRequired,\n  }).isRequired,\n};\n\nexport default ControlledSelect;\n"],"file":"ControlledSelect.js"}