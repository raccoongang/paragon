{"version":3,"sources":["../../../src/DataTable/selection/BaseSelectionStatus.jsx"],"names":["React","useContext","PropTypes","FormattedMessage","injectIntl","Button","DataTableContext","SELECT_ALL_TEST_ID","CLEAR_SELECTION_TEST_ID","BaseSelectionStatus","className","clearSelectionText","numSelectedRows","onSelectAll","onClear","selectAllText","allSelectedText","selectedText","intl","itemCount","isAllRowsSelected","intlAllSelectedText","formatMessage","id","defaultMessage","description","values","intlSelectedText","defaultProps","undefined","propTypes","string","isRequired","number","func","shape"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nimport { Button } from '../..';\nimport DataTableContext from '../DataTableContext';\nimport {\n  SELECT_ALL_TEST_ID,\n  CLEAR_SELECTION_TEST_ID,\n} from './data/constants';\n\nconst BaseSelectionStatus = ({\n  className,\n  clearSelectionText,\n  numSelectedRows,\n  onSelectAll,\n  onClear,\n  selectAllText,\n  allSelectedText,\n  selectedText,\n  intl,\n}) => {\n  const { itemCount } = useContext(DataTableContext);\n  const isAllRowsSelected = numSelectedRows === itemCount;\n  const intlAllSelectedText = intl.formatMessage({\n    id: 'pgn.DataTable.BaseSelectionStatus.allSelectedText',\n    defaultMessage: allSelectedText,\n    description: 'Text for all selected label',\n    values: { itemCount },\n  });\n  const intlSelectedText = intl.formatMessage({\n    id: 'pgn.DataTable.BaseSelectionStatus.selectedText',\n    defaultMessage: selectedText,\n    description: 'Text for selected label',\n    values: { itemCount },\n  });\n  return (\n    <div className={className}>\n      <span>{isAllRowsSelected ? intlAllSelectedText : intlSelectedText}</span>\n      {!isAllRowsSelected && (\n        <Button\n          className={SELECT_ALL_TEST_ID}\n          variant=\"link\"\n          size=\"inline\"\n          onClick={onSelectAll}\n        >\n          <FormattedMessage\n            id=\"pgn.DataTable.BaseSelectionStatus.clearSelectionText\"\n            defaultMessage={selectAllText}\n            description=\"Clear selection button label\"\n            values={{ itemCount }}\n          />\n        </Button>\n      )}\n      {numSelectedRows > 0 && (\n        <Button\n          className={CLEAR_SELECTION_TEST_ID}\n          variant=\"link\"\n          size=\"inline\"\n          onClick={onClear}\n        >\n          <FormattedMessage\n            id=\"pgn.DataTable.BaseSelectionStatus.clearSelectionText\"\n            defaultMessage={clearSelectionText}\n            description=\"Clear selection button label\"\n          />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nBaseSelectionStatus.defaultProps = {\n  className: undefined,\n  selectAllText: 'Select all {itemCount}',\n  allSelectedText: 'All {itemCount} selected',\n  selectedText: '{itemCount} selected',\n};\n\nBaseSelectionStatus.propTypes = {\n  className: PropTypes.string,\n  clearSelectionText: PropTypes.string.isRequired,\n  numSelectedRows: PropTypes.number.isRequired,\n  onSelectAll: PropTypes.func.isRequired,\n  onClear: PropTypes.func.isRequired,\n  selectAllText: PropTypes.string,\n  allSelectedText: PropTypes.string,\n  selectedText: PropTypes.string,\n  intl: PropTypes.shape.isRequired,\n};\n\nexport default injectIntl(BaseSelectionStatus);\n"],"file":"BaseSelectionStatus.js"}