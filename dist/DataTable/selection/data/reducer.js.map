{"version":3,"sources":["../../../../src/DataTable/selection/data/reducer.js"],"names":["uniqBy","SET_SELECTED_ROWS","DELETE_ROW","ADD_ROW","CLEAR_SELECTION","CLEAR_PAGE_SELECTION","SET_SELECT_ALL_ROWS_ALL_PAGES","initialState","selectedRows","isEntireTableSelected","selectionsReducer","state","action","type","rows","row","id","updatedState","length","itemCount","filter","rowId","rowIds","includes"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,eAAnB;AACA,SACEC,iBADF,EAEEC,UAFF,EAGEC,OAHF,EAIEC,eAJF,EAKEC,oBALF,EAMEC,6BANF,QAOO,WAPP;AASA,OAAO,IAAMC,YAAY,GAAG;AAC1BC,EAAAA,YAAY,EAAE,EADY;AAE1BC,EAAAA,qBAAqB,EAAE;AAFG,CAArB;;AAKP,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBJ,YAAyB;AAAA,MAAXK,MAAW;;AAC1D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKZ,iBAAL;AAAwB;AACtB,YAAMO,YAAY,GAAGR,MAAM,8BAAKW,KAAK,CAACH,YAAX,sBAA4BI,MAAM,CAACE,IAAnC,IAA0C,UAAAC,GAAG;AAAA,iBAAIA,GAAG,CAACC,EAAR;AAAA,SAA7C,CAA3B;;AACA,YAAMC,YAAY,mCACbN,KADa;AAEhBH,UAAAA,YAAY,EAAZA;AAFgB,UAAlB;;AAIA,YAAIA,YAAY,CAACU,MAAb,KAAwBN,MAAM,CAACO,SAAnC,EAA8C;AAC5CF,UAAAA,YAAY,CAACR,qBAAb,GAAqC,IAArC;AACD;;AACD,eAAOQ,YAAP;AACD;;AACD,SAAKX,6BAAL;AACE,6CACKK,KADL;AAEEF,QAAAA,qBAAqB,EAAE;AAFzB;;AAIF,SAAKP,UAAL;AACE,aAAO;AACLM,QAAAA,YAAY,EAAEG,KAAK,CAACH,YAAN,CAAmBY,MAAnB,CAA0B,UAACL,GAAD;AAAA,iBAASA,GAAG,CAACC,EAAJ,KAAWJ,MAAM,CAACS,KAA3B;AAAA,SAA1B,CADT;AAELZ,QAAAA,qBAAqB,EAAE;AAFlB,OAAP;;AAIF,SAAKN,OAAL;AAAc;AACZ,YAAMK,aAAY,GAAGR,MAAM,8BAAKW,KAAK,CAACH,YAAX,IAAyBI,MAAM,CAACG,GAAhC,IAAsC,UAAAA,GAAG;AAAA,iBAAIA,GAAG,CAACC,EAAR;AAAA,SAAzC,CAA3B;;AACA,YAAMP,qBAAqB,GAAGD,aAAY,CAACU,MAAb,KAAwBN,MAAM,CAACO,SAA7D;AACA,eAAO;AACLX,UAAAA,YAAY,EAAZA,aADK;AAELC,UAAAA,qBAAqB,EAArBA;AAFK,SAAP;AAID;;AACD,SAAKL,eAAL;AACE,aAAOG,YAAP;;AACF,SAAKF,oBAAL;AACE,aAAO;AACLI,QAAAA,qBAAqB,EAAE,KADlB;AAELD,QAAAA,YAAY,EAAEG,KAAK,CAACH,YAAN,CAAmBY,MAAnB,CAA0B,UAAAL,GAAG;AAAA,iBAAI,CAACH,MAAM,CAACU,MAAP,CAAcC,QAAd,CAAuBR,GAAG,CAACC,EAA3B,CAAL;AAAA,SAA7B;AAFT,OAAP;;AAIF;AACE,aAAOL,KAAP;AAtCJ;AAwCD,CAzCD;;AA2CA,eAAeD,iBAAf","sourcesContent":["import uniqBy from 'lodash.uniqby';\nimport {\n  SET_SELECTED_ROWS,\n  DELETE_ROW,\n  ADD_ROW,\n  CLEAR_SELECTION,\n  CLEAR_PAGE_SELECTION,\n  SET_SELECT_ALL_ROWS_ALL_PAGES,\n} from './actions';\n\nexport const initialState = {\n  selectedRows: [],\n  isEntireTableSelected: false,\n};\n\nconst selectionsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_SELECTED_ROWS: {\n      const selectedRows = uniqBy([...state.selectedRows, ...action.rows], row => row.id);\n      const updatedState = {\n        ...state,\n        selectedRows,\n      };\n      if (selectedRows.length === action.itemCount) {\n        updatedState.isEntireTableSelected = true;\n      }\n      return updatedState;\n    }\n    case SET_SELECT_ALL_ROWS_ALL_PAGES:\n      return {\n        ...state,\n        isEntireTableSelected: true,\n      };\n    case DELETE_ROW:\n      return {\n        selectedRows: state.selectedRows.filter((row) => row.id !== action.rowId),\n        isEntireTableSelected: false,\n      };\n    case ADD_ROW: {\n      const selectedRows = uniqBy([...state.selectedRows, action.row], row => row.id);\n      const isEntireTableSelected = selectedRows.length === action.itemCount;\n      return {\n        selectedRows,\n        isEntireTableSelected,\n      };\n    }\n    case CLEAR_SELECTION:\n      return initialState;\n    case CLEAR_PAGE_SELECTION:\n      return {\n        isEntireTableSelected: false,\n        selectedRows: state.selectedRows.filter(row => !action.rowIds.includes(row.id)),\n      };\n    default:\n      return state;\n  }\n};\n\nexport default selectionsReducer;\n"],"file":"reducer.js"}