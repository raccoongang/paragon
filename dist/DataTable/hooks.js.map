{"version":3,"sources":["../../src/DataTable/hooks.jsx"],"names":["useContext","DataTableContext","clearSelectionAction","useRows","getTableProps","prepareRow","page","rows","headerGroups","getTableBodyProps","displayRows","useSelectionActions","controlledTableSelections","toggleAllRowsSelected","selectedRows","isEntireTableSelected","dispatch","clearSelection","length"],"mappings":";;;;;;;;;;;;AAAA;AACA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,SAASC,oBAAT,QAAqC,0BAArC;AAEA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AAC3B,oBAEIH,UAAU,CAACC,gBAAD,CAFd;AAAA,MACEG,aADF,eACEA,aADF;AAAA,MACiBC,UADjB,eACiBA,UADjB;AAAA,MAC6BC,IAD7B,eAC6BA,IAD7B;AAAA,MACmCC,IADnC,eACmCA,IADnC;AAAA,MACyCC,YADzC,eACyCA,YADzC;AAAA,MACuDC,iBADvD,eACuDA,iBADvD;;AAIA,MAAMC,WAAW,GAAGJ,IAAI,IAAIC,IAA5B;AAEA,SAAO;AACLH,IAAAA,aAAa,EAAbA,aADK;AACUC,IAAAA,UAAU,EAAVA,UADV;AACsBK,IAAAA,WAAW,EAAXA,WADtB;AACmCF,IAAAA,YAAY,EAAZA,YADnC;AACiDC,IAAAA,iBAAiB,EAAjBA;AADjD,GAAP;AAGD,CAVM;AAYP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAME,mBAAmB,GAAG,SAAtBA,mBAAsB,OAEjCC,yBAFiC,EAG9B;AAAA,MAFDC,qBAEC,QAFDA,qBAEC;;AACH,6CAA4DD,yBAA5D;AAAA;AAAA,MAASE,YAAT,0BAASA,YAAT;AAAA,MAAuBC,qBAAvB,0BAAuBA,qBAAvB;AAAA,MAAgDC,QAAhD;;AAEA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B;AACA,QAAIH,YAAY,CAACI,MAAb,GAAsB,CAAtB,IAA2BH,qBAA/B,EAAsD;AACpDC,MAAAA,QAAQ,CAACd,oBAAoB,EAArB,CAAR;AACD,KAFD,MAEO;AACLW,MAAAA,qBAAqB,CAAC,KAAD,CAArB;AACD;AACF,GAPD;;AAQA,SAAO;AACLI,IAAAA,cAAc,EAAdA;AADK,GAAP;AAGD,CAjBM","sourcesContent":["/* eslint-disable import/prefer-default-export */\nimport { useContext } from 'react';\nimport DataTableContext from './DataTableContext';\nimport { clearSelectionAction } from './selection/data/actions';\n\nexport const useRows = () => {\n  const {\n    getTableProps, prepareRow, page, rows, headerGroups, getTableBodyProps,\n  } = useContext(DataTableContext);\n\n  const displayRows = page || rows;\n\n  return {\n    getTableProps, prepareRow, displayRows, headerGroups, getTableBodyProps,\n  };\n};\n\n/**\n * Hook that provides selection state functionality\n * @param {Object} param0 Table instance\n * @param {Array} controlledTableSelections Selection Object and dispatch function\n * @returns\n */\nexport const useSelectionActions = (\n  { toggleAllRowsSelected },\n  controlledTableSelections,\n) => {\n  const [{ selectedRows, isEntireTableSelected }, dispatch] = controlledTableSelections;\n\n  const clearSelection = () => {\n    // if using controlled selection component DataTable.ControlledSelectionStatus\n    if (selectedRows.length > 0 || isEntireTableSelected) {\n      dispatch(clearSelectionAction());\n    } else {\n      toggleAllRowsSelected(false);\n    }\n  };\n  return {\n    clearSelection,\n  };\n};\n"],"file":"hooks.js"}