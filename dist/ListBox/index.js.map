{"version":3,"sources":["../../src/ListBox/index.jsx"],"names":["classNames","nonNegativeInteger","PropTypes","React","ListBox","props","onFocus","bind","onKeyDown","state","selectedOptionIndex","setState","e","key","preventDefault","Children","count","children","map","child","index","cloneElement","isSelected","onSelect","className","tag","other","createElement","role","tabIndex","renderChildren","nextProps","prevState","undefined","Component","propTypes","node","isRequired","string","defaultProps"],"mappings":"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","sourcesContent":["/* eslint-disable max-len */\nimport classNames from 'classnames';\nimport { nonNegativeInteger } from 'airbnb-prop-types';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nexport default class ListBox extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onFocus = this.onFocus.bind(this);\n    this.onKeyDown = this.onKeyDown.bind(this);\n\n    this.state = {\n      selectedOptionIndex: null,\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { selectedOptionIndex } = nextProps;\n\n    if (selectedOptionIndex !== prevState.selectedOptionIndex\n      && selectedOptionIndex !== undefined) {\n      return { selectedOptionIndex };\n    }\n\n    return null;\n  }\n\n  onFocus() {\n    // if no ListBoxOption is selected, select first ListBoxOption on ListBox focus\n    if (!this.state.selectedOptionIndex) {\n      this.setState({\n        selectedOptionIndex: 0,\n      });\n    }\n  }\n\n  onKeyDown(e) {\n    switch (e.key) {\n      case 'ArrowDown': {\n        // prevent scrolling entire modal body with arrow keys\n        e.preventDefault();\n        if (this.state.selectedOptionIndex < React.Children.count(this.props.children) - 1) {\n          this.setState(state => ({\n            selectedOptionIndex: state.selectedOptionIndex + 1,\n          }));\n        }\n        break;\n      }\n      case 'ArrowUp': {\n        // prevent scrolling entire modal body with arrow keys\n        e.preventDefault();\n\n        if (this.state.selectedOptionIndex > 0) {\n          this.setState(state => ({\n            selectedOptionIndex: state.selectedOptionIndex - 1,\n          }));\n        }\n        break;\n      }\n      default:\n    }\n  }\n\n  renderChildren() {\n    return React.Children.map(this.props.children, (child, index) => React.cloneElement(child, {\n      index,\n      isSelected: index === this.state.selectedOptionIndex,\n      onSelect: () => { this.setState({ selectedOptionIndex: index }); child.props.onSelect(); },\n    }));\n  }\n\n  render() {\n    const {\n      children,\n      className,\n      selectedOptionIndex,\n      tag,\n      ...other\n    } = this.props;\n\n    return React.createElement(\n      this.props.tag,\n      {\n        'aria-activedescendant': this.state.selectedOptionIndex === null ? null : `list-box-option-${this.state.selectedOptionIndex}`,\n        className: classNames(['list-group', this.props.className]),\n        onFocus: this.onFocus,\n        onKeyDown: this.onKeyDown,\n        role: 'listbox',\n        tabIndex: 0,\n        ...other,\n      },\n      this.renderChildren(),\n    );\n  }\n}\n\nListBox.propTypes = {\n  /** specifies the ListBoxOption component(s) that will be displayed within the ListBox element. You can pass in one or more ListBoxOption components.\n */\n  children: PropTypes.node.isRequired,\n  /** specifies Bootstrap class names to apply to the ListBox component. The default is an empty string. */\n  className: PropTypes.string,\n  /** Although the ListBox component keeps track of which ListBoxOption is selected, `selectedOptionIndex` provides a mechanism for an override, if necessary. An example would be to clear the selectedOption when moving between views. Note that override is not permanent and that clicking on a ListBoxOption or interacting with the ListBox with the keyboard will change the selected ListBoxOption relative to the original override. The default is undefined. */\n  selectedOptionIndex: nonNegativeInteger,\n  /** used to specify the element type of the rendered ListBox component. The default is div. Example alternatives include ol, ul, span, etc. */\n  tag: PropTypes.string,\n};\n\nListBox.defaultProps = {\n  className: undefined,\n  selectedOptionIndex: undefined,\n  tag: 'div',\n};\n"],"file":"index.js"}