{"version":3,"sources":["../../src/ProductTour/Checkpoint.jsx"],"names":["React","useEffect","useState","useMediaQuery","PropTypes","createPopper","breakpoints","CheckpointActionRow","CheckpointBody","CheckpointBreadcrumbs","CheckpointTitle","Checkpoint","forwardRef","ref","body","index","placement","target","title","totalCheckpoints","props","checkpointVisible","setCheckpointVisible","isMobile","maxWidth","small","targetElement","document","querySelector","checkpoint","checkpointPopper","modifiers","name","options","padding","offset","tetherOffset","forceUpdate","targetOffset","getBoundingClientRect","top","bottom","global","innerHeight","includes","scrollTo","behavior","button","focus","isLastCheckpoint","isOnlyCheckpoint","visibility","pointerEvents","defaultProps","advanceButtonText","dismissButtonText","endButtonText","showDismissButton","undefined","propTypes","node","number","isRequired","onAdvance","func","onDismiss","onEnd","oneOf","string","bool"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useMediaQuery } from 'react-responsive';\nimport PropTypes from 'prop-types';\nimport { createPopper } from '@popperjs/core';\n\nimport breakpoints from '../utils/breakpoints';\n\nimport CheckpointActionRow from './CheckpointActionRow';\nimport CheckpointBody from './CheckpointBody';\nimport CheckpointBreadcrumbs from './CheckpointBreadcrumbs';\nimport CheckpointTitle from './CheckpointTitle';\n\nconst Checkpoint = React.forwardRef(({\n  body,\n  index,\n  placement,\n  target,\n  title,\n  totalCheckpoints,\n  ...props\n}, ref) => {\n  const [checkpointVisible, setCheckpointVisible] = useState(false);\n  const isMobile = useMediaQuery({ maxWidth: breakpoints.small.maxWidth });\n\n  useEffect(() => {\n    const targetElement = document.querySelector(target);\n    const checkpoint = document.querySelector('#pgn__checkpoint');\n    if (targetElement && checkpoint) {\n      // Use the Popper library to translate the Checkpoint to its target's coordinates\n      const checkpointPopper = createPopper(targetElement, checkpoint, {\n        placement: isMobile ? 'top' : placement,\n        modifiers: [\n          {\n            name: 'arrow',\n            options: {\n              padding: 25,\n            },\n          },\n          {\n            name: 'offset',\n            options: {\n              offset: [0, 20],\n            },\n          },\n          {\n            name: 'preventOverflow',\n            options: {\n              padding: 20,\n              tetherOffset: 35,\n            },\n          },\n        ],\n      });\n      setCheckpointVisible(true);\n      if (checkpointPopper) {\n        checkpointPopper.forceUpdate();\n      }\n    }\n  }, [target, isMobile]);\n\n  useEffect(() => {\n    if (checkpointVisible) {\n      // Scroll the Checkpoint into view once its rendered\n      const targetElement = document.querySelector(target);\n      let targetOffset = targetElement.getBoundingClientRect().top;\n      if ((targetOffset < 0) || (targetElement.getBoundingClientRect().bottom > global.innerHeight)) {\n        if (placement.includes('top')) {\n          if (targetOffset < 0) {\n            targetOffset *= -1;\n          }\n          targetOffset -= 280;\n        } else {\n          targetOffset -= 80;\n        }\n\n        global.scrollTo({\n          top: targetOffset, behavior: 'smooth',\n        });\n      }\n\n      const button = document.querySelector('.pgn__checkpoint-button_advance');\n      button.focus();\n    }\n  }, [target, checkpointVisible]);\n\n  const isLastCheckpoint = index + 1 === totalCheckpoints;\n  const isOnlyCheckpoint = totalCheckpoints === 1;\n\n  return (\n    <div\n      id=\"pgn__checkpoint\"\n      className=\"pgn__checkpoint\"\n      aria-labelledby=\"pgn__checkpoint-title\"\n      ref={ref}\n      role=\"dialog\"\n      style={{ visibility: checkpointVisible ? 'visible' : 'hidden', pointerEvents: checkpointVisible ? 'auto' : 'none' }}\n    >\n      {/* This text is not translated due to Paragon's lack of i18n support */}\n      <span className=\"sr-only\">Top of step {index + 1}</span>\n      {(title || !isOnlyCheckpoint) && (\n        <div className=\"pgn__checkpoint-header\">\n          <CheckpointTitle>{title}</CheckpointTitle>\n          <CheckpointBreadcrumbs currentIndex={index} totalCheckpoints={totalCheckpoints} />\n        </div>\n      )}\n      <CheckpointBody>{body}</CheckpointBody>\n      <CheckpointActionRow\n        isLastCheckpoint={isLastCheckpoint}\n        {...props}\n      />\n      <div id=\"pgn__checkpoint-arrow\" data-popper-arrow />\n      {/* This text is not translated due to Paragon's lack of i18n support */}\n      <span className=\"sr-only\">Bottom of step {index + 1}</span>\n    </div>\n  );\n});\n\nCheckpoint.defaultProps = {\n  advanceButtonText: null,\n  body: null,\n  dismissButtonText: null,\n  endButtonText: null,\n  placement: 'top',\n  title: null,\n  showDismissButton: undefined,\n};\n\nCheckpoint.propTypes = {\n  /** The text displayed on the button used to advance the tour for the given Checkpoint. */\n  advanceButtonText: PropTypes.node,\n  /** The text displayed in the body of the Checkpoint */\n  body: PropTypes.node,\n  /** The text displayed on the button used to dismiss the tour for the given Checkpoint. */\n  dismissButtonText: PropTypes.node,\n  /** The text displayed on the button used to end the tour for the given Checkpoint. */\n  endButtonText: PropTypes.node,\n  /** The current index of the given Checkpoint */\n  index: PropTypes.number.isRequired,\n  /** A function that runs when triggering the `onClick` event of the advance\n   * button for the given Checkpoint. */\n  onAdvance: PropTypes.func.isRequired,\n  /** A function that runs when triggering the `onClick` event of the dismiss\n   * button for the given Checkpoint. */\n  onDismiss: PropTypes.func.isRequired,\n  /** A function that runs when triggering the `onClick` event of the advance\n   * button if the given Checkpoint is the only or last Checkpoint in a tour. */\n  onEnd: PropTypes.func.isRequired,\n  /** A string that dictates the alignment of the Checkpoint around its target. */\n  placement: PropTypes.oneOf([\n    'top', 'top-start', 'top-end', 'right-start', 'right', 'right-end',\n    'left-start', 'left', 'left-end', 'bottom', 'bottom-start', 'bottom-end',\n  ]),\n  /** The CSS selector for the Checkpoint's desired target. */\n  target: PropTypes.string.isRequired,\n  /** The text displayed in the title of the Checkpoint */\n  title: PropTypes.node,\n  /** The total number of Checkpoints in a tour */\n  totalCheckpoints: PropTypes.number.isRequired,\n  /** Enforces visibility of the dismiss button under all circumstances */\n  showDismissButton: PropTypes.bool,\n};\n\nexport default Checkpoint;\n"],"file":"Checkpoint.js"}