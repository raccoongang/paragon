{"version":3,"sources":["../../src/ProductTour/index.jsx"],"names":["React","useEffect","useState","PropTypes","Checkpoint","ProductTour","forwardRef","ref","tours","tourValue","filter","tour","enabled","currentCheckpointData","setCurrentCheckpointData","index","setIndex","isTourEnabled","setIsTourEnabled","prunedCheckpoints","setPrunedCheckpoints","pruneCheckpoints","checkpoints","checkpointsWithRenderedTargets","checkpoint","document","querySelector","target","startingIndex","handleEsc","event","keyCode","onEscape","global","addEventListener","removeEventListener","handleAdvance","onAdvance","handleDismiss","onDismiss","handleEnd","onEnd","advanceButtonText","body","dismissButtonText","endButtonText","placement","title","length","defaultProps","propTypes","arrayOf","shape","node","func","oneOf","string","isRequired","bool","number","tourId"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Checkpoint from './Checkpoint';\n\nconst ProductTour = React.forwardRef(({ tours }, ref) => {\n  const tourValue = tours.filter((tour) => tour.enabled)[0];\n\n  const [currentCheckpointData, setCurrentCheckpointData] = useState(null);\n  const [index, setIndex] = useState(0);\n  const [isTourEnabled, setIsTourEnabled] = useState(!!tourValue);\n  const [prunedCheckpoints, setPrunedCheckpoints] = useState([]);\n\n  /**\n   * Takes a list of checkpoints and verifies that each target string provided is\n   * an element in the DOM.\n   */\n  const pruneCheckpoints = (checkpoints) => {\n    const checkpointsWithRenderedTargets = checkpoints.filter(\n      (checkpoint) => !!document.querySelector(checkpoint.target),\n    );\n    setPrunedCheckpoints(checkpointsWithRenderedTargets);\n  };\n\n  useEffect(() => {\n    if (tourValue) {\n      if (!isTourEnabled) {\n        setIsTourEnabled(tourValue.enabled);\n      }\n      pruneCheckpoints(tourValue.checkpoints);\n      setIndex(tourValue.startingIndex || 0);\n    }\n  }, [tourValue]);\n\n  useEffect(() => {\n    if (isTourEnabled) {\n      if (prunedCheckpoints) {\n        setCurrentCheckpointData(prunedCheckpoints[index]);\n      } else {\n        pruneCheckpoints(tourValue.checkpoints);\n      }\n    }\n  }, [index, isTourEnabled, prunedCheckpoints]);\n\n  useEffect(() => {\n    const handleEsc = (event) => {\n      if (isTourEnabled && event.keyCode === 27) {\n        setIsTourEnabled(false);\n        if (tourValue.onEscape) {\n          tourValue.onEscape();\n        }\n      }\n    };\n    global.addEventListener('keydown', handleEsc);\n\n    return () => {\n      global.removeEventListener('keydown', handleEsc);\n    };\n  }, [currentCheckpointData]);\n\n  if (!tourValue || !currentCheckpointData || !isTourEnabled) {\n    return null;\n  }\n\n  const handleAdvance = () => {\n    setIndex(index + 1);\n    if (currentCheckpointData.onAdvance) {\n      currentCheckpointData.onAdvance();\n    }\n  };\n\n  const handleDismiss = () => {\n    setIndex(0);\n    setIsTourEnabled(false);\n    if (currentCheckpointData.onDismiss) {\n      currentCheckpointData.onDismiss();\n    } else {\n      tourValue.onDismiss();\n    }\n    setCurrentCheckpointData(null);\n  };\n\n  const handleEnd = () => {\n    setIndex(0);\n    setIsTourEnabled(false);\n    if (tourValue.onEnd) {\n      tourValue.onEnd();\n    }\n    setCurrentCheckpointData(null);\n  };\n\n  return (\n    <Checkpoint\n      advanceButtonText={currentCheckpointData.advanceButtonText || tourValue.advanceButtonText}\n      body={currentCheckpointData.body}\n      currentCheckpointData={currentCheckpointData}\n      dismissButtonText={currentCheckpointData.dismissButtonText || tourValue.dismissButtonText}\n      endButtonText={currentCheckpointData.endButtonText || tourValue.endButtonText}\n      index={index}\n      onAdvance={handleAdvance}\n      onDismiss={handleDismiss}\n      onEnd={handleEnd}\n      placement={currentCheckpointData.placement}\n      target={currentCheckpointData.target}\n      title={currentCheckpointData.title}\n      totalCheckpoints={prunedCheckpoints.length}\n      ref={ref}\n    />\n  );\n});\n\nProductTour.defaultProps = {\n  tours: {\n    advanceButtonText: '',\n    checkpoints: {\n      advanceButtonText: '',\n      body: '',\n      dismissButtonText: '',\n      endButtonText: '',\n      onAdvance: () => {},\n      onDismiss: () => {},\n      placement: 'top',\n      title: '',\n    },\n    dismissButtonText: '',\n    endButtonText: '',\n    onDismiss: () => {},\n    onEnd: () => {},\n    onEscape: () => {},\n    startingIndex: 0,\n  },\n};\n\nProductTour.propTypes = {\n  tours: PropTypes.arrayOf(PropTypes.shape({\n    /** The text displayed on all buttons used to advance the tour. */\n    advanceButtonText: PropTypes.node,\n    /** An array comprised of checkpoint objects supporting the following values: */\n    checkpoints: PropTypes.arrayOf(PropTypes.shape({\n      /** The text displayed on the button used to advance the tour for the given Checkpoint\n       * (overrides the* `advanceButtonText` defined in the parent tour object). */\n      advanceButtonText: PropTypes.node,\n      /** The text displayed in the body of the Checkpoint */\n      body: PropTypes.node,\n      /** The text displayed on the button used to dismiss the tour for the given Checkpoint\n       * (overrides the `dismissButtonText` defined in the parent tour object). */\n      dismissButtonText: PropTypes.node,\n      /** The text displayed on the button used to end the tour for the given Checkpoint\n       * (overrides the `endButtonText` defined in the parent tour object). */\n      endButtonText: PropTypes.node,\n      /** A function that runs when triggering the `onClick` event of the advance\n       * button for the given Checkpoint. */\n      onAdvance: PropTypes.func,\n      /** A function that runs when triggering the `onClick` event of the dismiss\n       * button for the given Checkpoint (overrides the `onDismiss` function defined in the parent tour object). */\n      onDismiss: PropTypes.func,\n      /** A string that dictates the alignment of the Checkpoint around its target. */\n      placement: PropTypes.oneOf([\n        'top', 'top-start', 'top-end', 'right-start', 'right', 'right-end',\n        'left-start', 'left', 'left-end', 'bottom', 'bottom-start', 'bottom-end',\n      ]),\n      /** The CSS selector for the Checkpoint's desired target. */\n      target: PropTypes.string.isRequired,\n      /** The text displayed in the title of the Checkpoint */\n      title: PropTypes.node,\n    })),\n    /** The text displayed on the button used to dismiss the tour. */\n    dismissButtonText: PropTypes.node,\n    /** Whether the tour is enabled. If there are multiple tours defined, only one should be enabled at a time. */\n    enabled: PropTypes.bool.isRequired,\n    /** The text displayed on the button used to end the tour. */\n    endButtonText: PropTypes.node,\n    /** A function that runs when triggering the `onClick` event of the dismiss button. */\n    onDismiss: PropTypes.func,\n    /** A function that runs when triggering the `onClick` event of the end button. */\n    onEnd: PropTypes.func,\n    /** A function that runs when pressing the Escape key. */\n    onEscape: PropTypes.func,\n    /** The index of the desired `Checkpoint` to render when the tour starts. */\n    startingIndex: PropTypes.number,\n    /** The ID of the tour */\n    tourId: PropTypes.string.isRequired,\n  })),\n};\n\nexport default ProductTour;\n"],"file":"index.js"}