{"version":3,"sources":["../../src/SelectableBox/index.jsx"],"names":["React","useRef","PropTypes","classNames","SelectableBoxSet","useCheckboxSetContext","useRadioSetContext","getInputType","INPUT_TYPES","SelectableBox","forwardRef","ref","type","value","checked","children","isIndeterminate","isInvalid","onClick","onFocus","inputHidden","className","inputType","isChecked","includes","inputRef","input","createElement","hidden","tabIndex","onChange","onClickHandler","current","click","propTypes","node","isRequired","oneOfType","string","number","bool","oneOf","func","defaultProps","undefined","Set"],"mappings":"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","sourcesContent":["import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport SelectableBoxSet from './SelectableBoxSet';\nimport { useCheckboxSetContext } from '../Form/FormCheckboxSetContext';\nimport { useRadioSetContext } from '../Form/FormRadioSetContext';\nimport { getInputType } from './utils';\n\nconst INPUT_TYPES = [\n  'radio',\n  'checkbox',\n];\n\nconst SelectableBox = React.forwardRef(({\n  type,\n  value,\n  checked,\n  children,\n  isIndeterminate,\n  isInvalid,\n  onClick,\n  onFocus,\n  inputHidden,\n  className,\n}, ref) => {\n  const inputType = getInputType('SelectableBox', type);\n\n  const isChecked = () => {\n    switch (type) {\n      case 'radio':\n        return useRadioSetContext().value === value;\n      case 'checkbox':\n        return useCheckboxSetContext().value?.includes(value);\n      default:\n        return useRadioSetContext().value === value;\n    }\n  };\n\n  const inputRef = useRef(null);\n  const input = React.createElement(inputType, {\n    value,\n    checked,\n    hidden: inputHidden,\n    ref: inputRef,\n    tabIndex: -1,\n    onChange: () => {},\n    ...(type === 'checkbox' && { isIndeterminate }),\n  }, null);\n\n  const onClickHandler = () => {\n    inputRef.current.click();\n    if (onClick) { onClick(inputRef.current); }\n  };\n\n  return (\n    <div\n      role=\"button\"\n      onKeyPress={onClickHandler}\n      onClick={onClickHandler}\n      onFocus={onFocus}\n      className={classNames('pgn__selectable_box', className, {\n        'pgn__selectable_box-active': isChecked() || checked,\n        'pgn__selectable_box-invalid': isInvalid,\n      })}\n      tabIndex={0}\n      ref={ref}\n    >\n      {input}\n      {children}\n    </div>\n  );\n});\n\nSelectableBox.propTypes = {\n  /** Content of the `SelectableBox`. */\n  children: PropTypes.node.isRequired,\n  /** A value that is passed to the input tag. */\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Controls whether `SelectableBox` is checked. */\n  checked: PropTypes.bool,\n  /** Indicates the input type: checkbox or radio. */\n  type: PropTypes.oneOf(INPUT_TYPES),\n  /** Function that is called when the `SelectableBox` is clicked. */\n  onClick: PropTypes.func,\n  /** Function that is called when the `SelectableBox` is focused. */\n  onFocus: PropTypes.func,\n  /** Controls display of the input (checkbox or radio button) on the `SelectableBox`. */\n  inputHidden: PropTypes.bool,\n  /** Indicates a state for the 'checkbox' `type` when `SelectableBox` is neither checked nor unchecked. */\n  isIndeterminate: PropTypes.bool,\n  /** Adds errors styles to the `SelectableBox`. */\n  isInvalid: PropTypes.bool,\n  /** A class that is appended to the base element. */\n  className: PropTypes.string,\n};\n\nSelectableBox.defaultProps = {\n  value: undefined,\n  checked: false,\n  type: 'radio',\n  onClick: () => {},\n  onFocus: () => {},\n  inputHidden: true,\n  isIndeterminate: false,\n  isInvalid: false,\n  className: undefined,\n};\n\nSelectableBox.Set = SelectableBoxSet;\nexport default SelectableBox;\n"],"file":"index.js"}