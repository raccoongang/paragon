{"version":3,"sources":["../../src/Modal/FullscreenModal.jsx"],"names":["React","PropTypes","ModalDialog","FullscreenModal","children","footerNode","beforeBodyNode","afterBodyNode","props","title","modalBodyClassName","propTypes","node","isRequired","className","string","onClose","func","isOpen","bool","hasCloseButton","size","oneOf","variant","closeLabel","isFullscreenScroll","defaultProps","undefined"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB;AAAA,MACtBC,QADsB,QACtBA,QADsB;AAAA,MAEtBC,UAFsB,QAEtBA,UAFsB;AAAA,MAGtBC,cAHsB,QAGtBA,cAHsB;AAAA,MAItBC,aAJsB,QAItBA,aAJsB;AAAA,MAKnBC,KALmB;;AAAA,sBAOtB,oBAAC,WAAD,EAAiBA,KAAjB,eACE,oBAAC,WAAD,CAAa,MAAb,qBACE,oBAAC,WAAD,CAAa,KAAb,QAAoBA,KAAK,CAACC,KAA1B,CADF,CADF,EAIGH,cAJH,eAKE,oBAAC,WAAD,CAAa,IAAb;AAAkB,IAAA,SAAS,EAAEE,KAAK,CAACE;AAAnC,KAAwDN,QAAxD,CALF,EAMGG,aANH,EAOGF,UAAU,iBAAI,oBAAC,WAAD,CAAa,MAAb,QAAqBA,UAArB,CAPjB,CAPsB;AAAA,CAAxB;;AAkBAF,eAAe,CAACQ,SAAhB,GAA4B;AAC1B;AACAP,EAAAA,QAAQ,EAAEH,SAAS,CAACW,IAAV,CAAeC,UAFC;;AAG1B;AACAC,EAAAA,SAAS,EAAEb,SAAS,CAACc,MAJK;;AAK1B;AACAN,EAAAA,KAAK,EAAER,SAAS,CAACc,MAAV,CAAiBF,UANE;;AAO1B;AACAG,EAAAA,OAAO,EAAEf,SAAS,CAACgB,IAAV,CAAeJ,UARE;;AAS1B;AACAK,EAAAA,MAAM,EAAEjB,SAAS,CAACkB,IAVQ;;AAW1B;AACAC,EAAAA,cAAc,EAAEnB,SAAS,CAACkB,IAZA;;AAa1B;AACAE,EAAAA,IAAI,EAAEpB,SAAS,CAACqB,KAAV,CAAgB,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,YAAzB,CAAhB,CAdoB;;AAe1B;AACAC,EAAAA,OAAO,EAAEtB,SAAS,CAACqB,KAAV,CAAgB,CAAC,SAAD,EAAY,SAAZ,EAAuB,QAAvB,EAAiC,SAAjC,EAA4C,MAA5C,CAAhB,CAhBiB;;AAiB1B;AACAE,EAAAA,UAAU,EAAEvB,SAAS,CAACc,MAlBI;;AAmB1B;AACF;AACA;AACA;AACA;AACEU,EAAAA,kBAAkB,EAAExB,SAAS,CAACkB,IAxBJ;;AAyB1B;AACAd,EAAAA,UAAU,EAAEJ,SAAS,CAACW,IA1BI;;AA2B1B;AACAN,EAAAA,cAAc,EAAEL,SAAS,CAACW,IA5BA;;AA6B1B;AACAL,EAAAA,aAAa,EAAEN,SAAS,CAACW,IA9BC;;AA+B1B;AACAF,EAAAA,kBAAkB,EAAET,SAAS,CAACc;AAhCJ,CAA5B;AAmCAZ,eAAe,CAACuB,YAAhB,GAA+B;AAC7BR,EAAAA,MAAM,EAAE,KADqB;AAE7BE,EAAAA,cAAc,EAAE,IAFa;AAG7BC,EAAAA,IAAI,EAAE,YAHuB;AAI7BE,EAAAA,OAAO,EAAE,MAJoB;AAK7BC,EAAAA,UAAU,EAAE,OALiB;AAM7BV,EAAAA,SAAS,EAAEa,SANkB;AAO7BF,EAAAA,kBAAkB,EAAE,KAPS;AAQ7BpB,EAAAA,UAAU,EAAE,IARiB;AAS7BC,EAAAA,cAAc,EAAE,IATa;AAU7BC,EAAAA,aAAa,EAAE,IAVc;AAW7BG,EAAAA,kBAAkB,EAAE;AAXS,CAA/B;AAcA,eAAeP,eAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ModalDialog from './ModalDialog';\n\nconst FullscreenModal = ({\n  children,\n  footerNode,\n  beforeBodyNode,\n  afterBodyNode,\n  ...props\n}) => (\n  <ModalDialog {...props}>\n    <ModalDialog.Header>\n      <ModalDialog.Title>{props.title}</ModalDialog.Title>\n    </ModalDialog.Header>\n    {beforeBodyNode}\n    <ModalDialog.Body className={props.modalBodyClassName}>{children}</ModalDialog.Body>\n    {afterBodyNode}\n    {footerNode && <ModalDialog.Footer>{footerNode}</ModalDialog.Footer>}\n  </ModalDialog>\n);\n\nFullscreenModal.propTypes = {\n  /** Specifies contents of the component. */\n  children: PropTypes.node.isRequired,\n  /** Specifies class name to append to the base element. */\n  className: PropTypes.string,\n  /** Specifies the aria-label of the dialog. */\n  title: PropTypes.string.isRequired,\n  /** Specifies a callback to close the modal dialog. */\n  onClose: PropTypes.func.isRequired,\n  /** Specifies whether the modal is open. */\n  isOpen: PropTypes.bool,\n  /** Specifies whether the model hase close 'x' icon button in the top right of the dialog box. */\n  hasCloseButton: PropTypes.bool,\n  /** Specifies size of the dialog box. */\n  size: PropTypes.oneOf(['sm', 'md', 'lg', 'xl', 'fullscreen']),\n  /** Specifies visual style of the dialog box. */\n  variant: PropTypes.oneOf(['default', 'warning', 'danger', 'success', 'dark']),\n  /** The label supplied to the close icon button if one is rendered */\n  closeLabel: PropTypes.string,\n  /**\n   * Determines where a scrollbar should appear if a modal is too large for the\n   * viewport. When false, the ModalDialog.Body receives a scrollbar, when true\n   * the browser window itself receives the scrollbar.\n   */\n  isFullscreenScroll: PropTypes.bool,\n  /** Specifies footer for the dialog box. */\n  footerNode: PropTypes.node,\n  /** Specifies content that should be rendered before modal's body. */\n  beforeBodyNode: PropTypes.node,\n  /** Specifies content that should be rendered after modal's body. */\n  afterBodyNode: PropTypes.node,\n  /** Specifies class name for modal's body component. */\n  modalBodyClassName: PropTypes.string,\n};\n\nFullscreenModal.defaultProps = {\n  isOpen: false,\n  hasCloseButton: true,\n  size: 'fullscreen',\n  variant: 'dark',\n  closeLabel: 'Close',\n  className: undefined,\n  isFullscreenScroll: false,\n  footerNode: null,\n  beforeBodyNode: null,\n  afterBodyNode: null,\n  modalBodyClassName: '',\n};\n\nexport default FullscreenModal;\n"],"file":"FullscreenModal.js"}