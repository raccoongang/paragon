{"version":3,"sources":["../../src/Modal/AlertModal.jsx"],"names":["React","PropTypes","classNames","requiredWhenNot","ModalDialog","AlertModal","children","footerNode","props","className","title","propTypes","node","isRequired","string","isOpen","bool","isBlocking","hasCloseButton","onClose","func","size","oneOf","variant","closeLabel","isFullscreenScroll","defaultProps","undefined"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,SAASC,eAAT,QAAgC,yBAAhC;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA,MACjBC,QADiB,QACjBA,QADiB;AAAA,MAEjBC,UAFiB,QAEjBA,UAFiB;AAAA,MAGdC,KAHc;;AAAA,sBAKjB,oBAAC,WAAD,eACMA,KADN;AAEE,IAAA,SAAS,EAAEN,UAAU,CAAC,kBAAD,EAAqBM,KAAK,CAACC,SAA3B;AAFvB,mBAIE,oBAAC,WAAD,CAAa,MAAb,qBACE,oBAAC,WAAD,CAAa,KAAb,QAAoBD,KAAK,CAACE,KAA1B,CADF,CAJF,eAOE,oBAAC,WAAD,CAAa,IAAb,QAAmBJ,QAAnB,CAPF,EAQGC,UAAU,iBAAI,oBAAC,WAAD,CAAa,MAAb,QAAqBA,UAArB,CARjB,CALiB;AAAA,CAAnB;;AAiBAF,UAAU,CAACM,SAAX,GAAuB;AACrBL,EAAAA,QAAQ,EAAEL,SAAS,CAACW,IAAV,CAAeC,UADJ;;AAErB;AACAH,EAAAA,KAAK,EAAET,SAAS,CAACa,MAAV,CAAiBD,UAHH;;AAIrB;AACAE,EAAAA,MAAM,EAAEd,SAAS,CAACe,IALG;;AAMrB;AACAC,EAAAA,UAAU,EAAEhB,SAAS,CAACe,IAPD;;AAQrB;AACAE,EAAAA,cAAc,EAAEjB,SAAS,CAACe,IATL;;AAUrB;AACAG,EAAAA,OAAO,EAAEhB,eAAe,CAACF,SAAS,CAACmB,IAAX,EAAiB,YAAjB,CAXH;;AAYrB;AACAC,EAAAA,IAAI,EAAEpB,SAAS,CAACqB,KAAV,CAAgB,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,YAAzB,CAAhB,CAbe;;AAcrB;AACAC,EAAAA,OAAO,EAAEtB,SAAS,CAACqB,KAAV,CAAgB,CAAC,SAAD,EAAY,SAAZ,EAAuB,QAAvB,EAAiC,SAAjC,EAA4C,MAA5C,CAAhB,CAfY;;AAgBrB;AACAE,EAAAA,UAAU,EAAEvB,SAAS,CAACa,MAjBD;;AAkBrB;AACAL,EAAAA,SAAS,EAAER,SAAS,CAACa,MAnBA;;AAoBrB;AACF;AACA;AACA;AACA;AACEW,EAAAA,kBAAkB,EAAExB,SAAS,CAACe,IAzBT;;AA0BrB;AACAT,EAAAA,UAAU,EAAEN,SAAS,CAACW;AA3BD,CAAvB;AA8BAP,UAAU,CAACqB,YAAX,GAA0B;AACxBX,EAAAA,MAAM,EAAE,KADgB;AAExBE,EAAAA,UAAU,EAAE,KAFY;AAGxBC,EAAAA,cAAc,EAAE,KAHQ;AAIxBC,EAAAA,OAAO,EAAE,mBAAM,CAAE,CAJO;AAKxBE,EAAAA,IAAI,EAAE,IALkB;AAMxBE,EAAAA,OAAO,EAAE,SANe;AAOxBC,EAAAA,UAAU,EAAE,OAPY;AAQxBf,EAAAA,SAAS,EAAEkB,SARa;AASxBF,EAAAA,kBAAkB,EAAE,KATI;AAUxBlB,EAAAA,UAAU,EAAE;AAVY,CAA1B;AAaA,eAAeF,UAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport { requiredWhenNot } from '../utils/propTypesUtils';\nimport ModalDialog from './ModalDialog';\n\nconst AlertModal = ({\n  children,\n  footerNode,\n  ...props\n}) => (\n  <ModalDialog\n    {...props}\n    className={classNames('pgn__alert-modal', props.className)}\n  >\n    <ModalDialog.Header>\n      <ModalDialog.Title>{props.title}</ModalDialog.Title>\n    </ModalDialog.Header>\n    <ModalDialog.Body>{children}</ModalDialog.Body>\n    {footerNode && <ModalDialog.Footer>{footerNode}</ModalDialog.Footer>}\n  </ModalDialog>\n);\n\nAlertModal.propTypes = {\n  children: PropTypes.node.isRequired,\n  /** The aria-label of the dialog */\n  title: PropTypes.string.isRequired,\n  /** Is the modal dialog open or closed */\n  isOpen: PropTypes.bool,\n  /** Prevent clicking on the backdrop to close the modal */\n  isBlocking: PropTypes.bool,\n  /** Specifies whether the dialog box should contain 'x' icon button in the top right */\n  hasCloseButton: PropTypes.bool,\n  /** A callback to close the modal dialog */\n  onClose: requiredWhenNot(PropTypes.func, 'isBlocking'),\n  /** Sizes determine the maximum width of the dialog box */\n  size: PropTypes.oneOf(['sm', 'md', 'lg', 'xl', 'fullscreen']),\n  /** The visual style of the dialog box */\n  variant: PropTypes.oneOf(['default', 'warning', 'danger', 'success', 'dark']),\n  /** The label supplied to the close icon button if one is rendered */\n  closeLabel: PropTypes.string,\n  /** Specifies class name to append to the base element */\n  className: PropTypes.string,\n  /**\n   * Determines where a scrollbar should appear if a modal is too large for the\n   * viewport. When false, the ModalDialog.Body receives a scrollbar, when true\n   * the browser window itself receives the scrollbar.\n   */\n  isFullscreenScroll: PropTypes.bool,\n  /** Specifies what should be displayed in the footer of the dialog box */\n  footerNode: PropTypes.node,\n};\n\nAlertModal.defaultProps = {\n  isOpen: false,\n  isBlocking: false,\n  hasCloseButton: false,\n  onClose: () => {},\n  size: 'md',\n  variant: 'default',\n  closeLabel: 'Close',\n  className: undefined,\n  isFullscreenScroll: false,\n  footerNode: null,\n};\n\nexport default AlertModal;\n"],"file":"AlertModal.js"}