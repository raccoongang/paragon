{"version":3,"sources":["../../src/Modal/StandardModal.jsx"],"names":["React","PropTypes","ModalDialog","StandardModal","children","footerNode","beforeBodyNode","afterBodyNode","props","title","propTypes","node","isRequired","string","onClose","func","isOpen","bool","hasCloseButton","size","oneOf","variant","closeLabel","className","isFullscreenScroll","defaultProps","undefined"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA,MACpBC,QADoB,QACpBA,QADoB;AAAA,MAEpBC,UAFoB,QAEpBA,UAFoB;AAAA,MAGpBC,cAHoB,QAGpBA,cAHoB;AAAA,MAIpBC,aAJoB,QAIpBA,aAJoB;AAAA,MAKjBC,KALiB;;AAAA,sBAOpB,oBAAC,WAAD,EAAiBA,KAAjB,eACE,oBAAC,WAAD,CAAa,MAAb,qBACE,oBAAC,WAAD,CAAa,KAAb,QAAoBA,KAAK,CAACC,KAA1B,CADF,CADF,EAIGH,cAJH,eAKE,oBAAC,WAAD,CAAa,IAAb,QAAmBF,QAAnB,CALF,EAMGG,aANH,EAOGF,UAAU,iBAAI,oBAAC,WAAD,CAAa,MAAb,QAAqBA,UAArB,CAPjB,CAPoB;AAAA,CAAtB;;AAkBAF,aAAa,CAACO,SAAd,GAA0B;AACxB;AACAN,EAAAA,QAAQ,EAAEH,SAAS,CAACU,IAAV,CAAeC,UAFD;;AAGxB;AACAH,EAAAA,KAAK,EAAER,SAAS,CAACY,MAAV,CAAiBD,UAJA;;AAKxB;AACAE,EAAAA,OAAO,EAAEb,SAAS,CAACc,IAAV,CAAeH,UANA;;AAOxB;AACAI,EAAAA,MAAM,EAAEf,SAAS,CAACgB,IARM;;AASxB;AACAC,EAAAA,cAAc,EAAEjB,SAAS,CAACgB,IAVF;;AAWxB;AACAE,EAAAA,IAAI,EAAElB,SAAS,CAACmB,KAAV,CAAgB,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,YAAzB,CAAhB,CAZkB;;AAaxB;AACAC,EAAAA,OAAO,EAAEpB,SAAS,CAACmB,KAAV,CAAgB,CAAC,SAAD,EAAY,SAAZ,EAAuB,QAAvB,EAAiC,SAAjC,EAA4C,MAA5C,CAAhB,CAde;;AAexB;AACAE,EAAAA,UAAU,EAAErB,SAAS,CAACY,MAhBE;;AAiBxB;AACAU,EAAAA,SAAS,EAAEtB,SAAS,CAACY,MAlBG;;AAmBxB;AACF;AACA;AACA;AACA;AACEW,EAAAA,kBAAkB,EAAEvB,SAAS,CAACgB,IAxBN;;AAyBxB;AACAZ,EAAAA,UAAU,EAAEJ,SAAS,CAACU,IA1BE;;AA2BxB;AACAL,EAAAA,cAAc,EAAEL,SAAS,CAACU,IA5BF;;AA6BxB;AACAJ,EAAAA,aAAa,EAAEN,SAAS,CAACU;AA9BD,CAA1B;AAiCAR,aAAa,CAACsB,YAAd,GAA6B;AAC3BT,EAAAA,MAAM,EAAE,KADmB;AAE3BE,EAAAA,cAAc,EAAE,IAFW;AAG3BC,EAAAA,IAAI,EAAE,IAHqB;AAI3BE,EAAAA,OAAO,EAAE,SAJkB;AAK3BC,EAAAA,UAAU,EAAE,OALe;AAM3BC,EAAAA,SAAS,EAAEG,SANgB;AAO3BF,EAAAA,kBAAkB,EAAE,KAPO;AAQ3BnB,EAAAA,UAAU,EAAE,IARe;AAS3BC,EAAAA,cAAc,EAAE,IATW;AAU3BC,EAAAA,aAAa,EAAE;AAVY,CAA7B;AAaA,eAAeJ,aAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ModalDialog from './ModalDialog';\n\nconst StandardModal = ({\n  children,\n  footerNode,\n  beforeBodyNode,\n  afterBodyNode,\n  ...props\n}) => (\n  <ModalDialog {...props}>\n    <ModalDialog.Header>\n      <ModalDialog.Title>{props.title}</ModalDialog.Title>\n    </ModalDialog.Header>\n    {beforeBodyNode}\n    <ModalDialog.Body>{children}</ModalDialog.Body>\n    {afterBodyNode}\n    {footerNode && <ModalDialog.Footer>{footerNode}</ModalDialog.Footer>}\n  </ModalDialog>\n);\n\nStandardModal.propTypes = {\n  /** Specifies the content of the `Modal` */\n  children: PropTypes.node.isRequired,\n  /** The title for the `Modal` */\n  title: PropTypes.string.isRequired,\n  /** Optional callback function for when the modal it dismissed. */\n  onClose: PropTypes.func.isRequired,\n  /** Is the modal open or closed */\n  isOpen: PropTypes.bool,\n  /** The close 'x' icon button in the top right corner */\n  hasCloseButton: PropTypes.bool,\n  /** The modal size */\n  size: PropTypes.oneOf(['sm', 'md', 'lg', 'xl', 'fullscreen']),\n  /** The modal style variant to use */\n  variant: PropTypes.oneOf(['default', 'warning', 'danger', 'success', 'dark']),\n  /** Specifies the `aria-label` attribute for the close button */\n  closeLabel: PropTypes.string,\n  /** A class name to append to the modal */\n  className: PropTypes.string,\n  /**\n   * Determines where a scrollbar should appear if a modal is too large for the\n   * viewport. When false, the ModalDialog.Body receives a scrollbar, when true\n   * the browser window itself receives the scrollbar.\n   */\n  isFullscreenScroll: PropTypes.bool,\n  /** Specifies what should be displayed in the footer of the nodal */\n  footerNode: PropTypes.node,\n  /** Specifies what should be displayed before the body block */\n  beforeBodyNode: PropTypes.node,\n  /** Specifies what should be displayed after the body block */\n  afterBodyNode: PropTypes.node,\n};\n\nStandardModal.defaultProps = {\n  isOpen: false,\n  hasCloseButton: true,\n  size: 'md',\n  variant: 'default',\n  closeLabel: 'Close',\n  className: undefined,\n  isFullscreenScroll: false,\n  footerNode: null,\n  beforeBodyNode: null,\n  afterBodyNode: null,\n};\n\nexport default StandardModal;\n"],"file":"StandardModal.js"}