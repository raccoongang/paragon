{"version":3,"sources":["../../src/Modal/index.jsx"],"names":["React","ReactDOM","classNames","PropTypes","FocusOn","tabbable","Button","Icon","newId","Variant","Close","Modal","props","close","bind","headerId","modalBodyRef","createRef","document","el","createElement","isIE11","global","MSInputMethodContext","documentMode","state","open","parentSelector","parentElement","querySelector","Error","appendChild","prevProps","prevState","setState","unmountComponentAtNode","variant","variantIconClassName","status","WARNING","toLowerCase","body","getVariantIconClassName","current","Object","values","includes","e","stopPropagation","onClose","buttons","map","button","isValidElement","cloneElement","key","children","label","buttonProps","isValidVariantStatus","getVariantGridBody","dialogClassName","renderDefaultCloseButton","renderHeaderCloseButton","closeText","title","hasTabbableElements","length","getTabbableBodyElements","renderModalFooter","show","fade","tabIndex","renderBody","renderButtons","createPortal","renderModal","Component","propTypes","bool","string","oneOfType","element","isRequired","arrayOf","shape","func","defaultProps","undefined"],"mappings":"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","sourcesContent":["/* eslint-disable max-len */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { FocusOn } from 'react-focus-on';\nimport tabbable from 'tabbable';\n\nimport { Button } from '..';\nimport Icon from '../Icon';\nimport newId from '../utils/newId';\nimport Variant from '../utils/constants';\nimport { Close } from '../../icons';\n\nclass Modal extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.close = this.close.bind(this);\n\n    this.headerId = newId();\n    this.modalBodyRef = React.createRef();\n\n    if (typeof document !== 'undefined') {\n      this.el = document.createElement('div');\n      // Sets true for IE11, false otherwise: https://stackoverflow.com/a/22082397/6620612\n      this.isIE11 = !!global.MSInputMethodContext && !!document.documentMode;\n    }\n\n    this.state = {\n      open: props.open,\n    };\n  }\n\n  componentDidMount() {\n    const { parentSelector } = this.props;\n    this.parentElement = document.querySelector(parentSelector);\n    if (this.parentElement === null) {\n      throw new Error(`Modal received invalid parentSelector: ${parentSelector}, no matching element found`);\n    }\n    this.parentElement.appendChild(this.el);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { open } = this.props;\n    if (open !== prevProps.open || open !== prevState.open) {\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({ open });\n    }\n  }\n\n  componentWillUnmount() {\n    ReactDOM.unmountComponentAtNode(this.parentElement);\n  }\n\n  getVariantIconClassName() {\n    const { variant } = this.props;\n    let variantIconClassName;\n\n    switch (variant.status) {\n      case Variant.status.WARNING:\n        variantIconClassName = classNames(\n          'fa',\n          'fa-exclamation-triangle',\n          'fa-3x',\n          `text-${variant.status.toLowerCase()}`,\n        );\n        break;\n      default:\n        break;\n    }\n\n    return variantIconClassName;\n  }\n\n  getVariantGridBody(body) {\n    const { variant } = this.props;\n\n    return (\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col-md-10\">\n            <div>\n              {body}\n            </div>\n          </div>\n          <div className=\"col-md-2\">\n            <Icon\n              id={newId(`Modal-${variant.status}`)}\n              className={this.getVariantIconClassName()}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  getTabbableBodyElements() {\n    if (this.modalBodyRef?.current) {\n      return tabbable(this.modalBodyRef.current);\n    }\n    return [];\n  }\n\n  isValidVariantStatus() {\n    const { variant } = this.props;\n    return Object.values(Variant.status).includes(variant.status);\n  }\n\n  close(e) {\n    if (e) {\n      e.stopPropagation();\n    }\n\n    this.setState({ open: false });\n    this.props.onClose();\n  }\n\n  renderButtons() {\n    return this.props.buttons.map((button) => {\n      // button is either a React component that we want clone or a set of props\n      if (React.isValidElement(button)) {\n        return React.cloneElement(button, {\n          key: button.props.children,\n        });\n      }\n\n      const { label, ...buttonProps } = button;\n\n      return (\n        <Button.Deprecated\n          {...buttonProps}\n          key={label}\n        >\n          {label}\n        </Button.Deprecated>\n      );\n    });\n  }\n\n  renderBody() {\n    let { body } = this.props;\n\n    if (typeof body === 'string') {\n      body = <p>{body}</p>;\n    }\n\n    if (this.isValidVariantStatus()) {\n      body = this.getVariantGridBody(body);\n    }\n\n    return body;\n  }\n\n  renderModal() {\n    const { open } = this.state;\n    const {\n      dialogClassName,\n      renderDefaultCloseButton,\n      renderHeaderCloseButton,\n      buttons,\n      closeText,\n      title,\n    } = this.props;\n\n    const hasTabbableElements = (\n      renderDefaultCloseButton\n      || renderHeaderCloseButton\n      || buttons.length > 0\n      || this.getTabbableBodyElements().length > 0\n    );\n    const renderModalFooter = renderDefaultCloseButton || buttons.length > 0;\n\n    return (\n      <>\n        <div\n          className={classNames({\n            'modal-backdrop': open,\n            show: open,\n            fade: !open,\n          })}\n          role=\"presentation\"\n        />\n        <div\n          className={classNames(\n            'modal',\n            {\n              show: open,\n              fade: !open,\n              'd-block': open,\n              'is-ie11': this.isIE11,\n            },\n          )}\n          role=\"presentation\"\n        >\n          <div\n            className={classNames(\n              {\n                'modal-dialog': open,\n              },\n              dialogClassName,\n            )}\n            role=\"dialog\"\n            aria-modal\n            aria-labelledby={this.headerId}\n          >\n            <FocusOn\n              enabled={open}\n              onClickOutside={this.close}\n              onEscapeKey={this.close}\n            >\n              <div\n                className=\"modal-content\"\n                // if the modal doesn't contain any tabbable elements, make this element programmatically focusable.\n                {...(!hasTabbableElements ? { tabIndex: -1 } : {})}\n              >\n                <div className=\"modal-header\">\n                  <h2 className=\"modal-title\" id={this.headerId}>{title}</h2>\n                  {renderHeaderCloseButton && (\n                    <Button.Deprecated\n                      className=\"p-1\"\n                      onClick={this.close}\n                    >\n                      <Icon src={Close} screenReaderText={closeText} />\n                    </Button.Deprecated>\n                  )}\n                </div>\n                <div className=\"modal-body\" ref={this.modalBodyRef}>\n                  {this.renderBody()}\n                </div>\n                {renderModalFooter && (\n                  <div className=\"modal-footer\">\n                    {renderDefaultCloseButton && (\n                      <Button\n                        variant=\"link\"\n                        onClick={this.close}\n                      >\n                        {closeText}\n                      </Button>\n                    )}\n                    {this.renderButtons()}\n                  </div>\n                )}\n              </div>\n            </FocusOn>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  render() {\n    if (!this.el) {\n      return null;\n    }\n\n    return ReactDOM.createPortal(\n      this.renderModal(),\n      this.el,\n    );\n  }\n}\n\nModal.propTypes = {\n  /** specifies whether the modal renders open or closed on the initial render. It defaults to false. */\n  open: PropTypes.bool,\n  /** is the selector for an element in the dom which the modal should be rendered under. It uses querySelector to find the first element that matches that selector, and then creates a react portal to a div underneath the parent element.\n */\n  parentSelector: PropTypes.string,\n  /** a string or an element that is rendered inside of the modal title, above the modal body. */\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.element]).isRequired,\n  /** a string or an element that is rendered inside of the modal body, between the title and the footer. */\n  body: PropTypes.oneOfType([PropTypes.string, PropTypes.element]).isRequired,\n  /** an array of either elements or shapes that take the form of the buttonPropTypes. See the [buttonPropTypes](https://github.com/edx/paragon/blob/master/src/Button/index.jsx#L40) for a list of acceptable props to pass as part of a button. */\n  buttons: PropTypes.arrayOf(PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.shape({}), // TODO: Only accept nodes in the future\n  ])),\n  /** specifies the display text of the default Close button. It defaults to \"Close\". */\n  closeText: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  /** a function that is called on close. It can be used to perform actions upon closing of the modal, such as restoring focus to the previous logical focusable element. */\n  onClose: PropTypes.func.isRequired,\n  variant: PropTypes.shape({\n    status: PropTypes.string,\n  }),\n  /** specifies whether the default close button is rendered in the footer. It defaults to true. */\n  renderDefaultCloseButton: PropTypes.bool,\n  /** specifies whether a close button is rendered in the modal header. It defaults to true. */\n  renderHeaderCloseButton: PropTypes.bool,\n  /**\n   * Specifies optional classes to add to the element with the '.modal-dialog' class.  See Bootstrap documentation for possible classes.  Some options: modal-lg, modal-sm, modal-dialog-centered\n   */\n  dialogClassName: PropTypes.string,\n};\n\nModal.defaultProps = {\n  open: false,\n  parentSelector: 'body',\n  buttons: [],\n  closeText: 'Close',\n  variant: {},\n  renderDefaultCloseButton: true,\n  renderHeaderCloseButton: true,\n  dialogClassName: undefined,\n};\n\nexport default Modal;\n"],"file":"index.js"}