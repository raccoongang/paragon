{"version":3,"sources":["../../src/Modal/MarketingModal.jsx"],"names":["React","PropTypes","requiredWhenNot","ModalDialog","MarketingModal","children","footerNode","heroNode","heroIsDark","beforeBodyNode","afterBodyNode","props","propTypes","node","isRequired","title","string","isOpen","bool","isBlocking","hasCloseButton","onClose","func","size","oneOf","closeLabel","className","isFullscreenScroll","defaultProps","undefined"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,eAAT,QAAgC,yBAAhC;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB;AAAA,MACrBC,QADqB,QACrBA,QADqB;AAAA,MAErBC,UAFqB,QAErBA,UAFqB;AAAA,MAGrBC,QAHqB,QAGrBA,QAHqB;AAAA,MAIrBC,UAJqB,QAIrBA,UAJqB;AAAA,MAKrBC,cALqB,QAKrBA,cALqB;AAAA,MAMrBC,aANqB,QAMrBA,aANqB;AAAA,MAOlBC,KAPkB;;AAAA,sBASrB,oBAAC,WAAD,eACMA,KADN;AAEE,IAAA,OAAO,EAAEH,UAAU,GAAG,MAAH,GAAY;AAFjC,MAIGD,QAJH,EAKGE,cALH,eAME,oBAAC,WAAD,CAAa,IAAb,QAAmBJ,QAAnB,CANF,EAOGK,aAPH,EAQGJ,UAAU,iBACT,oBAAC,WAAD,CAAa,MAAb,QAAqBA,UAArB,CATJ,CATqB;AAAA,CAAvB;;AAuBAF,cAAc,CAACQ,SAAf,GAA2B;AACzB;AACAP,EAAAA,QAAQ,EAAEJ,SAAS,CAACY,IAAV,CAAeC,UAFA;;AAGzB;AACAC,EAAAA,KAAK,EAAEd,SAAS,CAACe,MAAV,CAAiBF,UAJC;;AAKzB;AACAG,EAAAA,MAAM,EAAEhB,SAAS,CAACiB,IANO;;AAOzB;AACAC,EAAAA,UAAU,EAAElB,SAAS,CAACiB,IARG;;AASzB;AACAE,EAAAA,cAAc,EAAEnB,SAAS,CAACiB,IAVD;;AAWzB;AACAG,EAAAA,OAAO,EAAEnB,eAAe,CAACD,SAAS,CAACqB,IAAX,EAAiB,YAAjB,CAZC;;AAazB;AACAC,EAAAA,IAAI,EAAEtB,SAAS,CAACuB,KAAV,CAAgB,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,YAAzB,CAAhB,CAdmB;;AAezB;AACAC,EAAAA,UAAU,EAAExB,SAAS,CAACe,MAhBG;;AAiBzB;AACAU,EAAAA,SAAS,EAAEzB,SAAS,CAACe,MAlBI;;AAmBzB;AACF;AACA;AACA;AACA;AACEW,EAAAA,kBAAkB,EAAE1B,SAAS,CAACiB,IAxBL;;AAyBzB;AACAZ,EAAAA,UAAU,EAAEL,SAAS,CAACY,IA1BG;;AA2BzB;AACAL,EAAAA,UAAU,EAAEP,SAAS,CAACiB,IA5BG;;AA6BzB;AACAX,EAAAA,QAAQ,EAAEN,SAAS,CAACY,IA9BK;;AA+BzB;AACAJ,EAAAA,cAAc,EAAER,SAAS,CAACY,IAhCD;;AAiCzB;AACAH,EAAAA,aAAa,EAAET,SAAS,CAACY;AAlCA,CAA3B;AAqCAT,cAAc,CAACwB,YAAf,GAA8B;AAC5BX,EAAAA,MAAM,EAAE,KADoB;AAE5BE,EAAAA,UAAU,EAAE,KAFgB;AAG5BC,EAAAA,cAAc,EAAE,IAHY;AAI5BC,EAAAA,OAAO,EAAE,mBAAM,CAAE,CAJW;AAK5BE,EAAAA,IAAI,EAAE,IALsB;AAM5BE,EAAAA,UAAU,EAAE,OANgB;AAO5BC,EAAAA,SAAS,EAAEG,SAPiB;AAQ5BF,EAAAA,kBAAkB,EAAE,IARQ;AAS5BrB,EAAAA,UAAU,EAAE,IATgB;AAU5BE,EAAAA,UAAU,EAAE,IAVgB;AAW5BD,EAAAA,QAAQ,EAAE,IAXkB;AAY5BE,EAAAA,cAAc,EAAE,IAZY;AAa5BC,EAAAA,aAAa,EAAE;AAba,CAA9B;AAgBA,eAAeN,cAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { requiredWhenNot } from '../utils/propTypesUtils';\nimport ModalDialog from './ModalDialog';\n\nconst MarketingModal = ({\n  children,\n  footerNode,\n  heroNode,\n  heroIsDark,\n  beforeBodyNode,\n  afterBodyNode,\n  ...props\n}) => (\n  <ModalDialog\n    {...props}\n    variant={heroIsDark ? 'dark' : 'default'}\n  >\n    {heroNode}\n    {beforeBodyNode}\n    <ModalDialog.Body>{children}</ModalDialog.Body>\n    {afterBodyNode}\n    {footerNode && (\n      <ModalDialog.Footer>{footerNode}</ModalDialog.Footer>\n    )}\n  </ModalDialog>\n);\n\nMarketingModal.propTypes = {\n  /** Specifies the content of the modal */\n  children: PropTypes.node.isRequired,\n  /** Title of the modal */\n  title: PropTypes.string.isRequired,\n  /** Is the modal dialog open or closed */\n  isOpen: PropTypes.bool,\n  /** Prevent clicking on the backdrop to close the modal */\n  isBlocking: PropTypes.bool,\n  /** The close 'x' icon button in the top right corner */\n  hasCloseButton: PropTypes.bool,\n  /** Callback function for when the modal is dismissed */\n  onClose: requiredWhenNot(PropTypes.func, 'isBlocking'),\n  /** Size of the modal window */\n  size: PropTypes.oneOf(['sm', 'md', 'lg', 'xl', 'fullscreen']),\n  /** Specifies the ``aria-label`` attribute for the close button */\n  closeLabel: PropTypes.string,\n  /** Specifies class name to append to the base element */\n  className: PropTypes.string,\n  /**\n   * Determines where a scrollbar should appear if a modal is too large for the\n   * viewport. When false, the ModalDialog.Body receives a scrollbar, when true\n   * the browser window itself receives the scrollbar.\n   */\n  isFullscreenScroll: PropTypes.bool,\n  /** Specifies what should be displayed in the footer of the nodal */\n  footerNode: PropTypes.node,\n  /** Enables dark theme for the modal */\n  heroIsDark: PropTypes.bool,\n  /** Specifies what should be displayed in the header of the modal */\n  heroNode: PropTypes.node,\n  /** Specifies what should be displayed before the body block */\n  beforeBodyNode: PropTypes.node,\n  /** Specifies what should be displayed after the body block */\n  afterBodyNode: PropTypes.node,\n};\n\nMarketingModal.defaultProps = {\n  isOpen: false,\n  isBlocking: false,\n  hasCloseButton: true,\n  onClose: () => {},\n  size: 'md',\n  closeLabel: 'Close',\n  className: undefined,\n  isFullscreenScroll: true,\n  footerNode: null,\n  heroIsDark: true,\n  heroNode: null,\n  beforeBodyNode: null,\n  afterBodyNode: null,\n};\n\nexport default MarketingModal;\n"],"file":"MarketingModal.js"}