{"version":3,"sources":["../../src/Modal/ModalDialog.jsx"],"names":["React","PropTypes","classNames","useMediaQuery","ModalLayer","IconButton","Icon","Close","ModalCloseButton","ModalDialogHeader","ModalDialogTitle","ModalDialogFooter","ModalDialogBody","ModalDialogHero","ModalDialog","children","title","isOpen","onClose","size","variant","hasCloseButton","closeLabel","isFullscreenScroll","className","isFullscreenOnMobile","isBlocking","isMobile","query","showFullScreen","propTypes","node","isRequired","string","func","bool","oneOf","defaultProps","undefined","Header","Title","Footer","CloseButton","Body","Hero"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { useMediaQuery } from 'react-responsive';\nimport ModalLayer from './ModalLayer';\nimport IconButton from '../IconButton';\nimport Icon from '../Icon'\nimport { Close } from '../../icons';\nimport ModalCloseButton from './ModalCloseButton';\nimport ModalDialogHeader from './ModalDialogHeader';\nimport ModalDialogTitle from './ModalDialogTitle';\nimport ModalDialogFooter from './ModalDialogFooter';\nimport ModalDialogBody from './ModalDialogBody';\nimport ModalDialogHero from './ModalDialogHero';\n\nfunction ModalDialog({\n  children,\n  title,\n  isOpen,\n  onClose,\n  size,\n  variant,\n  hasCloseButton,\n  closeLabel,\n  isFullscreenScroll,\n  className,\n  isFullscreenOnMobile,\n  isBlocking,\n}) {\n  const isMobile = useMediaQuery({ query: '(max-width: 767.98px)' });\n  const showFullScreen = (isFullscreenOnMobile && isMobile);\n  return (\n    <ModalLayer isOpen={isOpen} onClose={onClose} isBlocking={isBlocking}>\n      <div\n        role=\"dialog\"\n        aria-label={title}\n        className={classNames(\n          'pgn__modal',\n          {\n            [`pgn__modal-${showFullScreen ? 'fullscreen' : size}`]: size,\n            [`pgn__modal-${variant}`]: variant,\n            'pgn__modal-scroll-fullscreen': isFullscreenScroll,\n          },\n          className,\n        )}\n      >\n        {hasCloseButton && (\n          <div className=\"pgn__modal-close-container\">\n            <ModalCloseButton\n              as={IconButton}\n              iconAs={Icon}\n              invertColors={variant === 'dark'}\n              src={Close}\n              alt={closeLabel}\n            />\n          </div>\n        )}\n        {children}\n      </div>\n    </ModalLayer>\n  );\n}\n\nModalDialog.propTypes = {\n  /**\n   *  Specifies the content of the dialog\n   */\n  children: PropTypes.node.isRequired,\n  /**\n   * The aria-label of the dialog\n   */\n  title: PropTypes.string.isRequired,\n  /**\n   * A callback to close the modal dialog\n   */\n  onClose: PropTypes.func.isRequired,\n  /**\n   * Is the modal dialog open or closed\n   */\n  isOpen: PropTypes.bool,\n  /**\n   * The close 'x' icon button in the top right of the dialog box\n   */\n  hasCloseButton: PropTypes.bool,\n  /**\n   * Sizes determine the maximum width of the dialog box\n   */\n  size: PropTypes.oneOf(['sm', 'md', 'lg', 'xl', 'fullscreen']),\n  /**\n   * The visual style of the dialog box\n   */\n  variant: PropTypes.oneOf(['default', 'warning', 'danger', 'success', 'dark']),\n  /**\n   * The label supplied to the close icon button if one is rendered\n   */\n  closeLabel: PropTypes.string,\n  /**\n   *  Specifies class name to append to the base element\n   */\n  className: PropTypes.string,\n  /**\n   * Determines where a scrollbar should appear if a modal is too large for the\n   * viewport. When false, the ``ModalDialog``. Body receives a scrollbar, when true\n   * the browser window itself receives the scrollbar.\n   */\n  isFullscreenScroll: PropTypes.bool,\n  /**\n   * To show full screen view on mobile screens\n   */\n  isFullscreenOnMobile: PropTypes.bool,\n  /**\n   * Prevent clicking on the backdrop to close the modal\n   */\n  isBlocking: PropTypes.bool,\n};\n\nModalDialog.defaultProps = {\n  isOpen: false,\n  hasCloseButton: true,\n  size: 'md',\n  variant: 'default',\n  closeLabel: 'Close',\n  className: undefined,\n  isFullscreenScroll: false,\n  isFullscreenOnMobile: false,\n  isBlocking: false,\n};\n\nModalDialog.Header = ModalDialogHeader;\nModalDialog.Title = ModalDialogTitle;\nModalDialog.Footer = ModalDialogFooter;\nModalDialog.CloseButton = ModalCloseButton;\nModalDialog.Body = ModalDialogBody;\nModalDialog.Hero = ModalDialogHero;\n\nexport default ModalDialog;\n"],"file":"ModalDialog.js"}