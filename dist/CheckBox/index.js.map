{"version":3,"sources":["../../src/CheckBox/index.jsx"],"names":["React","PropTypes","asInput","withDeprecatedProps","DEPR_TYPES","Check","props","onChange","bind","state","checked","prevProps","setState","event","prevState","inputRef","others","Component","propTypes","bool","func","oneOfType","shape","current","instanceOf","element","defaultProps","undefined","CheckBox","className","deprType","FORMAT","expect","value","transform","Array","isArray","join","message"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,mBAAP,IAA8BC,UAA9B,QAAgD,wBAAhD;;IAEMC,K;;;;;AACJ,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AAEA,UAAKC,QAAL,GAAgB,MAAKA,QAAL,CAAcC,IAAd,+BAAhB;AAEA,UAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAEJ,KAAK,CAACI,OAAN,IAAiB;AADf,KAAb;AALiB;AAQlB;AAED;;;;;WACA,4BAAmBC,SAAnB,EAA8B;AAC5B,UAAIA,SAAS,CAACD,OAAV,KAAsB,KAAKJ,KAAL,CAAWI,OAArC,EAA8C;AAC5C,aAAKE,QAAL,CAAc;AACZF,UAAAA,OAAO,EAAE,KAAKJ,KAAL,CAAWI;AADR,SAAd;AAGD;AACF;;;WAED,kBAASG,KAAT,EAAgB;AACd,WAAKD,QAAL,CAAc,UAAAE,SAAS;AAAA,eAAK;AAC1BJ,UAAAA,OAAO,EAAE,CAACI,SAAS,CAACJ;AADM,SAAL;AAAA,OAAvB;AAGA,WAAKJ,KAAL,CAAWC,QAAX,CAAoBM,KAApB;AACD;;;WAED,kBAAS;AACP,wBAGI,KAAKP,KAHT;AAAA,UACES,QADF,eACEA,QADF;AAAA,UAEKC,MAFL;;AAIA,0BACE,0CACMA,MADN;AAEE,QAAA,IAAI,EAAC,UAFP;AAGE,QAAA,GAAG,EAAED,QAHP;AAIE,QAAA,OAAO,EAAE,KAAKN,KAAL,CAAWC,OAJtB;AAKE,wBAAc,KAAKD,KAAL,CAAWC,OAL3B;AAME,QAAA,QAAQ,EAAE,KAAKH;AANjB,SADF;AAUD;;;;EA1CiBP,KAAK,CAACiB,S;;AA6C1BZ,KAAK,CAACa,SAAN,GAAkB;AAChB;;AACA;AACAR,EAAAA,OAAO,EAAET,SAAS,CAACkB,IAHH;;AAIhB;AACAZ,EAAAA,QAAQ,EAAEN,SAAS,CAACmB,IALJ;;AAMhB;AACAL,EAAAA,QAAQ,EAAEd,SAAS,CAACoB,SAAV,CAAoB,CAC5BpB,SAAS,CAACmB,IADkB,EAE5BnB,SAAS,CAACqB,KAAV,CAAgB;AAAEC,IAAAA,OAAO,EAAEtB,SAAS,CAACuB,UAAV,CAAqBvB,SAAS,CAACwB,OAA/B;AAAX,GAAhB,CAF4B,CAApB;AAPM,CAAlB;AAaApB,KAAK,CAACqB,YAAN,GAAqB;AACnBhB,EAAAA,OAAO,EAAE,KADU;AAEnBH,EAAAA,QAAQ,EAAE,oBAAM,CAAE,CAFC;AAGnBQ,EAAAA,QAAQ,EAAEY;AAHS,CAArB;AAMA,IAAMC,QAAQ,GAAG1B,OAAO,CAACC,mBAAmB,CAACE,KAAD,EAAQ,UAAR,EAAoB;AAC9DwB,EAAAA,SAAS,EAAE;AACTC,IAAAA,QAAQ,EAAE1B,UAAU,CAAC2B,MADZ;AAETC,IAAAA,MAAM,EAAE,gBAAAC,KAAK;AAAA,aAAI,OAAOA,KAAP,KAAiB,QAArB;AAAA,KAFJ;AAGTC,IAAAA,SAAS,EAAE,mBAAAD,KAAK;AAAA,aAAKE,KAAK,CAACC,OAAN,CAAcH,KAAd,IAAuBA,KAAK,CAACI,IAAN,CAAW,GAAX,CAAvB,GAAyCJ,KAA9C;AAAA,KAHP;AAITK,IAAAA,OAAO,EAAE;AAJA;AADmD,CAApB,CAApB,EAOpB,UAPoB,EAOR,KAPQ,CAAxB;AASA,eAAeV,QAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport asInput from '../asInput';\nimport withDeprecatedProps, { DEPR_TYPES } from '../withDeprecatedProps';\n\nclass Check extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = this.onChange.bind(this);\n\n    this.state = {\n      checked: props.checked || false,\n    };\n  }\n\n  /* eslint-disable react/no-did-update-set-state */\n  componentDidUpdate(prevProps) {\n    if (prevProps.checked !== this.props.checked) {\n      this.setState({\n        checked: this.props.checked,\n      });\n    }\n  }\n\n  onChange(event) {\n    this.setState(prevState => ({\n      checked: !prevState.checked,\n    }));\n    this.props.onChange(event);\n  }\n\n  render() {\n    const {\n      inputRef,\n      ...others\n    } = this.props;\n    return (\n      <input\n        {...others}\n        type=\"checkbox\"\n        ref={inputRef}\n        checked={this.state.checked}\n        aria-checked={this.state.checked}\n        onChange={this.onChange}\n      />\n    );\n  }\n}\n\nCheck.propTypes = {\n  // eslint-disable-next-line max-len\n  /** (`Boolean`): `true` if the state should be checked, `false` otherwise. This prop can be used to manage the Checkbox more directly, overriding the default Checkbox checked state. */\n  checked: PropTypes.bool,\n  /** (`Boolean`): `true` if the checkbox should be disabled, `false` otherwise */\n  onChange: PropTypes.func,\n  /** function to be called when the checkbox changes state */\n  inputRef: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.shape({ current: PropTypes.instanceOf(PropTypes.element) }),\n  ]),\n};\n\nCheck.defaultProps = {\n  checked: false,\n  onChange: () => {},\n  inputRef: undefined,\n};\n\nconst CheckBox = asInput(withDeprecatedProps(Check, 'Checkbox', {\n  className: {\n    deprType: DEPR_TYPES.FORMAT,\n    expect: value => typeof value === 'string',\n    transform: value => (Array.isArray(value) ? value.join(' ') : value),\n    message: 'It should be a string.',\n  },\n}), 'checkbox', false);\n\nexport default CheckBox;\n"],"file":"index.js"}