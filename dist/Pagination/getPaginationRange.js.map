{"version":3,"sources":["../../src/Pagination/getPaginationRange.js"],"names":["ELLIPSIS","getPaginationRange","currentIndex","count","length","requireFirstAndLastPages","boundedLength","Math","min","unboundedStartIndex","ceil","zeroBoundedStartIndex","max","boundedStartIndex","range","Array","from","el","i","isFirstPageInRange","isLastPageInRange"],"mappings":"AAAA,SAASA,QAAT,QAAyB,aAAzB;;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,OAKrB;AAAA,MAJJC,YAII,QAJJA,YAII;AAAA,MAHJC,KAGI,QAHJA,KAGI;AAAA,MAFJC,MAEI,QAFJA,MAEI;AAAA,mCADJC,wBACI;AAAA,MADJA,wBACI,sCADuB,IACvB;AACJ,MAAMC,aAAa,GAAGC,IAAI,CAACC,GAAL,CAASL,KAAT,EAAgBC,MAAhB,CAAtB;AACA,MAAMK,mBAAmB,GAAGP,YAAY,GAAGK,IAAI,CAACG,IAAL,CAAUJ,aAAa,GAAG,CAA1B,CAA3C;AACA,MAAMK,qBAAqB,GAAGJ,IAAI,CAACK,GAAL,CAAS,CAAT,EAAYH,mBAAZ,CAA9B,CAHI,CAIJ;;AACA,MAAMI,iBAAiB,GAAGN,IAAI,CAACC,GAAL,CAASG,qBAAT,EAAgCR,KAAK,GAAGG,aAAxC,CAA1B;AAEA,MAAMQ,KAAK,GAAGC,KAAK,CAACC,IAAN,CAAW;AAAEZ,IAAAA,MAAM,EAAEE;AAAV,GAAX,EAAsC,UAACW,EAAD,EAAKC,CAAL;AAAA,WAAWL,iBAAiB,GAAGK,CAA/B;AAAA,GAAtC,CAAd;AAEA,MAAMC,kBAAkB,GAAGL,KAAK,CAAC,CAAD,CAAL,KAAa,CAAxC;AACA,MAAMM,iBAAiB,GAAGN,KAAK,CAACA,KAAK,CAACV,MAAN,GAAe,CAAhB,CAAL,KAA4BD,KAAK,GAAG,CAA9D;;AAEA,MAAIE,wBAAwB,IAAI,CAACc,kBAAjC,EAAqD;AACnDL,IAAAA,KAAK,CAAC,CAAD,CAAL,GAAW,CAAX;AACAA,IAAAA,KAAK,CAAC,CAAD,CAAL,GAAWd,QAAX;AACD;;AAED,MAAIK,wBAAwB,IAAI,CAACe,iBAAjC,EAAoD;AAClDN,IAAAA,KAAK,CAACA,KAAK,CAACV,MAAN,GAAe,CAAhB,CAAL,GAA0BD,KAAK,GAAG,CAAlC;AACAW,IAAAA,KAAK,CAACA,KAAK,CAACV,MAAN,GAAe,CAAhB,CAAL,GAA0BJ,QAA1B;AACD;;AAED,SAAOc,KAAP;AACD,CA5BD;;AA8BA,eAAeb,kBAAf","sourcesContent":["import { ELLIPSIS } from './constants';\n\nconst getPaginationRange = ({\n  currentIndex,\n  count,\n  length,\n  requireFirstAndLastPages = true,\n}) => {\n  const boundedLength = Math.min(count, length);\n  const unboundedStartIndex = currentIndex - Math.ceil(boundedLength / 2);\n  const zeroBoundedStartIndex = Math.max(0, unboundedStartIndex);\n  // Bind maximum value of zeroBoundedStartIndex to avoid running past the count of pages\n  const boundedStartIndex = Math.min(zeroBoundedStartIndex, count - boundedLength);\n\n  const range = Array.from({ length: boundedLength }, (el, i) => boundedStartIndex + i);\n\n  const isFirstPageInRange = range[0] === 0;\n  const isLastPageInRange = range[range.length - 1] === count - 1;\n\n  if (requireFirstAndLastPages && !isFirstPageInRange) {\n    range[0] = 0;\n    range[1] = ELLIPSIS;\n  }\n\n  if (requireFirstAndLastPages && !isLastPageInRange) {\n    range[range.length - 1] = count - 1;\n    range[range.length - 2] = ELLIPSIS;\n  }\n\n  return range;\n};\n\nexport default getPaginationRange;\n"],"file":"getPaginationRange.js"}