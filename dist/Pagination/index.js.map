{"version":3,"sources":["../../src/Pagination/index.jsx"],"names":["between","classNames","PropTypes","React","MediaQuery","Button","Dropdown","IconButton","Icon","breakpoints","newId","ELLIPSIS","getPaginationRange","ChevronLeft","ChevronRight","ArrowBackIos","ArrowForwardIos","VARIANTS","default","secondary","reduced","minimal","ReducedPagination","currentPage","pageCount","handlePageSelect","Array","keys","map","pageNum","Pagination","props","previousButtonRef","nextButtonRef","pageRefs","state","pageButtonSelected","bind","nextProps","nextState","prevProps","prevState","currentPageRef","focus","setPageButtonSelectedState","setState","page","onPageSelect","value","buttonLabels","active","ariaLabel","element","toString","pageOfCount","label","icons","variant","size","isFirstPage","previousPage","iconSize","previous","disabled","undefined","handlePreviousNextButtonClick","leftIcon","isLastPage","nextPage","next","rightIcon","description","maxPagesDisplayed","pages","currentIndex","count","length","requireFirstAndLastPages","pageIndex","renderEllipsisButton","renderPageButton","renderPreviousButton","renderNextButton","invertColors","paginationLabel","className","renderScreenReaderSection","extraSmall","maxWidth","renderPageOfCountButton","small","minWidth","renderPageButtons","renderReducedPagination","renderMinimalPaginations","Component","propTypes","func","isRequired","number","string","shape","gt","node","oneOf","bool","defaultProps","Reduced"],"mappings":"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","sourcesContent":["/* eslint-disable max-len */\nimport { between } from 'airbnb-prop-types';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport MediaQuery from 'react-responsive';\n\nimport Button from '../Button';\nimport Dropdown from '../Dropdown';\nimport IconButton from '../IconButton';\nimport Icon from '../Icon';\nimport breakpoints from '../utils/breakpoints';\nimport newId from '../utils/newId';\nimport { ELLIPSIS } from './constants';\nimport getPaginationRange from './getPaginationRange';\nimport {\n  ChevronLeft, ChevronRight, ArrowBackIos, ArrowForwardIos,\n} from '../../icons';\n\nconst VARIANTS = {\n  default: 'default',\n  secondary: 'secondary',\n  reduced: 'reduced',\n  minimal: 'minimal',\n};\n\nconst ReducedPagination = ({ currentPage, pageCount, handlePageSelect }) => (\n  <Dropdown>\n    <Dropdown.Toggle variant=\"tertiary\" id=\"Pagination dropdown\">\n      {currentPage} of {pageCount}\n    </Dropdown.Toggle>\n    <Dropdown.Menu className=\"pgn__reduced-pagination-dropdown\">\n      {[...Array(pageCount).keys()].map(pageNum => (\n        <Dropdown.Item onClick={() => handlePageSelect(pageNum + 1)} key={pageNum}>\n          {pageNum + 1}\n        </Dropdown.Item>\n      ))}\n    </Dropdown.Menu>\n  </Dropdown>\n);\n\nclass Pagination extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.previousButtonRef = null;\n    this.nextButtonRef = null;\n\n    this.pageRefs = {};\n\n    this.state = {\n      currentPage: this.props.currentPage,\n      pageButtonSelected: false,\n    };\n\n    this.handlePageSelect = this.handlePageSelect.bind(this);\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    // Update only when the props and currentPage state changes to avoid re-render\n    // if only the pageButtonSelected state is changed.\n    return nextProps !== this.props || nextState.currentPage !== this.state.currentPage;\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { currentPage, pageButtonSelected } = this.state;\n    const currentPageRef = this.pageRefs[currentPage];\n\n    if (currentPageRef && pageButtonSelected) {\n      currentPageRef.focus();\n      this.setPageButtonSelectedState(false);\n    }\n    /* eslint-disable react/no-did-update-set-state */\n    if (\n      this.state.currentPage === prevState.currentPage\n      && (this.props.currentPage !== prevProps.currentPage\n      || this.props.currentPage !== this.state.currentPage)\n    ) {\n      this.setState({\n        currentPage: this.props.currentPage,\n      });\n    }\n  }\n\n  handlePageSelect(page) {\n    if (page !== this.state.currentPage) {\n      this.setState({\n        currentPage: page,\n        pageButtonSelected: true,\n      });\n      this.props.onPageSelect(page);\n    }\n  }\n\n  handlePreviousNextButtonClick(page) {\n    const { pageCount } = this.props;\n\n    if (page === 1) {\n      this.nextButtonRef.focus();\n    } else if (page === pageCount) {\n      this.previousButtonRef.focus();\n    }\n    this.setState({ currentPage: page });\n    this.props.onPageSelect(page);\n  }\n\n  setPageButtonSelectedState(value) {\n    this.setState({ pageButtonSelected: value });\n  }\n\n  renderEllipsisButton() {\n    return (\n      <li\n        className={classNames(['page-item', 'disabled'])}\n        key={newId('pagination-ellipsis-')}\n      >\n        <span\n          className={classNames([\n            'btn',\n            'page-link',\n            'ml-0',\n            'border-0',\n          ])}\n        >\n          ...\n        </span>\n      </li>\n    );\n  }\n\n  renderPageButton(page) {\n    const { buttonLabels } = this.props;\n    const active = page === this.state.currentPage || null;\n\n    let ariaLabel = `${buttonLabels.page} ${page}`;\n    if (active) {\n      ariaLabel += `, ${buttonLabels.currentPage}`;\n    }\n\n    return (\n      <li\n        className={classNames([\n          'page-item',\n          {\n            active,\n          },\n        ])}\n        key={page}\n      >\n        <Button\n          className=\"page-link\"\n          aria-label={ariaLabel}\n          ref={(element) => { this.pageRefs[page] = element; }}\n          onClick={() => { this.handlePageSelect(page); }}\n        >\n          {page.toString()}\n        </Button>\n      </li>\n    );\n  }\n\n  renderPageOfCountButton() {\n    const { currentPage } = this.state;\n    const { pageCount, buttonLabels } = this.props;\n\n    const ariaLabel = `${buttonLabels.page} ${currentPage}, ${buttonLabels.currentPage}, ${buttonLabels.pageOfCount} ${pageCount}`;\n\n    const label = (\n      <span>\n        {`${currentPage} `}\n        {buttonLabels.pageOfCount}\n        {` ${pageCount}`}\n      </span>\n    );\n\n    return (\n      <li\n        className={classNames(['page-item', 'disabled'])}\n        key={currentPage}\n      >\n        <span\n          className={classNames([\n            'btn',\n            'page-link',\n            'mx-2',\n            'border-0',\n          ])}\n          aria-label={ariaLabel}\n        >\n          {label}\n        </span>\n      </li>\n    );\n  }\n\n  renderPreviousButton() {\n    const {\n      buttonLabels, icons, variant, size,\n    } = this.props;\n    const { currentPage } = this.state;\n    const isFirstPage = currentPage === 1;\n    const previousPage = isFirstPage ? null : currentPage - 1;\n    const iconSize = (variant !== VARIANTS.reduced && size !== 'small') || variant === VARIANTS.minimal;\n\n    let ariaLabel = `${buttonLabels.previous}`;\n    if (previousPage) {\n      ariaLabel += `, ${buttonLabels.page} ${previousPage}`;\n    }\n\n    return (\n      <li\n        className={classNames(\n          'page-item',\n          {\n            disabled: isFirstPage,\n          },\n        )}\n      >\n        {\n          variant === VARIANTS.default\n            ? (\n              <Button\n                className=\"previous page-link\"\n                aria-label={ariaLabel}\n                tabIndex={isFirstPage ? '-1' : undefined}\n                onClick={() => { this.handlePreviousNextButtonClick(previousPage); }}\n                ref={(element) => { this.previousButtonRef = element; }}\n                disabled={isFirstPage}\n              >\n                <div>\n                  {icons.leftIcon}\n                  {variant === VARIANTS.default ? buttonLabels.previous : null}\n                </div>\n              </Button>\n            )\n            : (\n              <IconButton\n                src={iconSize ? ArrowBackIos : ChevronLeft}\n                iconAs={Icon}\n                className=\"previous page-link\"\n                aria-label={ariaLabel}\n                tabIndex={isFirstPage ? '-1' : undefined}\n                onClick={() => { this.handlePreviousNextButtonClick(previousPage); }}\n                ref={(element) => { this.previousButtonRef = element; }}\n                disabled={isFirstPage}\n                alt=\"Go to previous page\"\n              />\n            )\n        }\n      </li>\n    );\n  }\n\n  renderNextButton() {\n    const {\n      buttonLabels, pageCount, icons, variant, size,\n    } = this.props;\n    const { currentPage } = this.state;\n    const isLastPage = currentPage === pageCount;\n    const nextPage = isLastPage ? null : currentPage + 1;\n    const iconSize = (variant !== VARIANTS.reduced && size !== 'small') || variant === VARIANTS.minimal;\n\n    let ariaLabel = `${buttonLabels.next}`;\n    if (nextPage) {\n      ariaLabel += `, ${buttonLabels.page} ${nextPage}`;\n    }\n\n    return (\n      <li\n        className={classNames(\n          'page-item',\n          {\n            disabled: isLastPage,\n          },\n        )}\n      >\n        {variant === VARIANTS.default ? (\n          <Button\n            className=\"next page-link\"\n            aria-label={ariaLabel}\n            tabIndex={isLastPage ? '-1' : undefined}\n            onClick={() => { this.handlePreviousNextButtonClick(nextPage); }}\n            ref={(element) => { this.nextButtonRef = element; }}\n            disabled={isLastPage}\n          >\n            <div>\n              {variant === VARIANTS.default ? buttonLabels.next : null}\n              {icons.rightIcon}\n            </div>\n          </Button>\n        ) : (\n          <IconButton\n            src={iconSize ? ArrowForwardIos : ChevronRight}\n            iconAs={Icon}\n            className=\"next page-link\"\n            aria-label={ariaLabel}\n            tabIndex={isLastPage ? '-1' : undefined}\n            onClick={() => { this.handlePreviousNextButtonClick(nextPage); }}\n            ref={(element) => { this.nextButtonRef = element; }}\n            disabled={isLastPage}\n            alt=\"Go to next page\"\n          />\n        )}\n      </li>\n    );\n  }\n\n  renderScreenReaderSection() {\n    const { currentPage } = this.state;\n    const { buttonLabels, pageCount } = this.props;\n\n    const description = `${buttonLabels.page} ${currentPage}, ${buttonLabels.currentPage}, ${buttonLabels.pageOfCount} ${pageCount}`;\n\n    return (\n      <div\n        className=\"sr-only\"\n        aria-live=\"polite\"\n        aria-relevant=\"text\"\n        aria-atomic\n      >\n        {description}\n      </div>\n    );\n  }\n\n  renderPageButtons() {\n    const { currentPage } = this.state;\n    const { pageCount, maxPagesDisplayed } = this.props;\n\n    const pages = getPaginationRange({\n      currentIndex: currentPage,\n      count: pageCount,\n      length: maxPagesDisplayed,\n      requireFirstAndLastPages: true,\n    });\n\n    return pages.map((pageIndex) => {\n      if (pageIndex === ELLIPSIS) {\n        return this.renderEllipsisButton();\n      }\n      return this.renderPageButton(pageIndex + 1);\n    });\n  }\n\n  renderReducedPagination() {\n    const { currentPage } = this.state;\n    const { pageCount } = this.props;\n\n    return (\n      <ul className=\"pagination\">\n        {this.renderPreviousButton()}\n        <ReducedPagination currentPage={currentPage} pageCount={pageCount} handlePageSelect={this.handlePageSelect} />\n        {this.renderNextButton()}\n      </ul>\n    );\n  }\n\n  renderMinimalPaginations() {\n    return (\n      <ul className=\"pagination\">\n        {this.renderPreviousButton()}\n        {this.renderNextButton()}\n      </ul>\n    );\n  }\n\n  render() {\n    const { variant, invertColors, size } = this.props;\n    return (\n      <nav\n        aria-label={this.props.paginationLabel}\n        className={classNames(this.props.className, {\n          [`pagination-${variant}`]: variant,\n          'pagination-inverse': invertColors,\n          'pagination-small': size !== VARIANTS.default,\n        })}\n      >\n        {this.renderScreenReaderSection()}\n        {variant === VARIANTS.default || variant === VARIANTS.secondary\n          ? (\n            <ul className=\"pagination\">\n              {this.renderPreviousButton()}\n              <MediaQuery maxWidth={breakpoints.extraSmall.maxWidth}>\n                {this.renderPageOfCountButton()}\n              </MediaQuery>\n              <MediaQuery minWidth={breakpoints.small.minWidth}>\n                {this.renderPageButtons()}\n              </MediaQuery>\n              {this.renderNextButton()}\n            </ul>\n          )\n          : null}\n        {variant === VARIANTS.reduced ? this.renderReducedPagination() : null}\n        {variant === VARIANTS.minimal ? this.renderMinimalPaginations() : null}\n      </nav>\n    );\n  }\n}\n\nPagination.propTypes = {\n  /**\n   * Specifies a callback function that is executed when the\n   * user selects a page button or the `Previous`/`Next` buttons. For example:\n   *\n   * ```jsx\n   *  <Pagination onPageSelect={(pageNumber) => { console.log(pageNumber); } />\n   * ```\n   */\n  onPageSelect: PropTypes.func.isRequired,\n  /** Specifies the total number of pages in the `Pagination` component. */\n  pageCount: PropTypes.number.isRequired,\n  /** Specifies the `aria-label` for the `<nav>` element that wraps the pagination button list. */\n  paginationLabel: PropTypes.string.isRequired,\n  /**\n   * Specifies the labels to use for the `Previous`/`Next`\n   * buttons as well as the various parts of `aria-label`\n   * on the page buttons for accessibility. All button labels\n   * accept both string or elements. The button label options are as follows:\n   *\n   * `previous`: Text for the `Previous` button;\n   *\n   * `next`: Text for the `Next` button;\n   *\n   * `page`: Text in the `aria-label` on page buttons to describe the button (e.g., \"**Page** 1\");\n   *\n   * `currentPage`: Text to depict the selected page in the `aria-label`\n   * on page buttons (e.g., \"Page 1, **Current Page**\");\n   *\n   * `pageOfCount`: Text that separates the current page and total page count\n   * for the mobile UI (e.g., \"Page 1 **of** 20\").\n   *\n   * The default is:\n   * ```javascript\n   * {\n   *   previous: 'Previous',\n   *   next: 'Next',\n   *   page: 'Page',\n   *   currentPage: 'Current Page',\n   *   pageOfCount: 'of',\n   * }\n   * ```\n   */\n  buttonLabels: PropTypes.shape({\n    previous: PropTypes.string,\n    next: PropTypes.string,\n    page: PropTypes.string,\n    currentPage: PropTypes.string,\n    pageOfCount: PropTypes.string,\n  }),\n  /** Specifies any class name(s) for the `Pagination` component. The default is an empty string. */\n  className: PropTypes.string,\n  /** specifies the page that the `Pagination` component will automatically select. The default is `1`. */\n  currentPage: PropTypes.number,\n  /**\n   * Specifies the number of page buttons to display in between the `Previous`\n   * and `Next` buttons. This number also includes any ellipses in the total count.\n   * Also, to ensure that at least one clickable page button is shown when both ellipses\n   * are displayed, this value must be greater than `4`. The default is `7`.\n   */\n  maxPagesDisplayed: between({ gt: 4 }),\n  /**\n   * Specifies icons used to indicate previous and next page. Can be an element,\n   * string, symbol, etc. Default is chevrons rendered using fa-css.\n   */\n  icons: PropTypes.shape({\n    leftIcon: PropTypes.node,\n    rightIcon: PropTypes.node,\n  }),\n  variant: PropTypes.oneOf(['default', 'secondary', 'reduced', 'minimal']),\n  invertColors: PropTypes.bool,\n  size: PropTypes.oneOf(['default', 'small']),\n};\n\nPagination.defaultProps = {\n  icons: {\n    leftIcon: <Icon src={ChevronLeft} />,\n    rightIcon: <Icon src={ChevronRight} />,\n  },\n  buttonLabels: {\n    previous: 'Previous',\n    next: 'Next',\n    page: 'Page',\n    currentPage: 'Current Page',\n    pageOfCount: 'of',\n  },\n  className: undefined,\n  currentPage: 1,\n  maxPagesDisplayed: 7,\n  variant: 'default',\n  invertColors: false,\n  size: 'default',\n};\n\nReducedPagination.propTypes = {\n  currentPage: PropTypes.number.isRequired,\n  pageCount: PropTypes.number.isRequired,\n  handlePageSelect: PropTypes.func.isRequired,\n};\n\nPagination.Reduced = ReducedPagination;\n\nexport default Pagination;\n"],"file":"index.js"}