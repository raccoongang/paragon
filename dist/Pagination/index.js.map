{"version":3,"sources":["../../src/Pagination/index.jsx"],"names":["between","classNames","PropTypes","React","MediaQuery","Button","Icon","breakpoints","newId","ELLIPSIS","getPaginationRange","Pagination","props","previousButtonRef","nextButtonRef","pageRefs","state","currentPage","pageButtonSelected","nextProps","nextState","prevProps","prevState","currentPageRef","focus","setPageButtonSelectedState","setState","page","onPageSelect","pageCount","value","buttonLabels","active","ariaLabel","element","handlePageSelect","toString","pageOfCount","label","icons","isFirstPage","previousPage","previous","disabled","undefined","handlePreviousNextButtonClick","leftIcon","isLastPage","nextPage","next","rightIcon","description","maxPagesDisplayed","pages","currentIndex","count","length","requireFirstAndLastPages","map","pageIndex","renderEllipsisButton","renderPageButton","paginationLabel","className","renderScreenReaderSection","renderPreviousButton","extraSmall","maxWidth","renderPageOfCountButton","small","minWidth","renderPageButtons","renderNextButton","Component","propTypes","func","isRequired","number","string","shape","gt","node","defaultProps"],"mappings":"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","sourcesContent":["/* eslint-disable max-len */\nimport { between } from 'airbnb-prop-types';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport MediaQuery from 'react-responsive';\n\nimport { Button } from '..';\nimport Icon from '../Icon';\nimport breakpoints from '../utils/breakpoints';\nimport newId from '../utils/newId';\nimport { ELLIPSIS } from './constants';\nimport getPaginationRange from './getPaginationRange';\n\nclass Pagination extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.previousButtonRef = null;\n    this.nextButtonRef = null;\n\n    this.pageRefs = {};\n\n    this.state = {\n      currentPage: this.props.currentPage,\n      pageButtonSelected: false,\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    // Update only when the props and currentPage state changes to avoid re-render\n    // if only the pageButtonSelected state is changed.\n    return nextProps !== this.props || nextState.currentPage !== this.state.currentPage;\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { currentPage, pageButtonSelected } = this.state;\n    const currentPageRef = this.pageRefs[currentPage];\n\n    if (currentPageRef && pageButtonSelected) {\n      currentPageRef.focus();\n      this.setPageButtonSelectedState(false);\n    }\n    /* eslint-disable react/no-did-update-set-state */\n    if (\n      this.state.currentPage === prevState.currentPage\n      && (this.props.currentPage !== prevProps.currentPage\n      || this.props.currentPage !== this.state.currentPage)\n    ) {\n      this.setState({\n        currentPage: this.props.currentPage,\n      });\n    }\n  }\n\n  handlePageSelect(page) {\n    if (page !== this.state.currentPage) {\n      this.setState({\n        currentPage: page,\n        pageButtonSelected: true,\n      });\n      this.props.onPageSelect(page);\n    }\n  }\n\n  handlePreviousNextButtonClick(page) {\n    const { pageCount } = this.props;\n\n    if (page === 1) {\n      this.nextButtonRef.focus();\n    } else if (page === pageCount) {\n      this.previousButtonRef.focus();\n    }\n    this.setState({ currentPage: page });\n    this.props.onPageSelect(page);\n  }\n\n  setPageButtonSelectedState(value) {\n    this.setState({ pageButtonSelected: value });\n  }\n\n  renderEllipsisButton() {\n    return (\n      <li\n        className={classNames(['page-item', 'disabled'])}\n        key={newId('pagination-ellipsis-')}\n      >\n        <span\n          className={classNames([\n            'btn',\n            'page-link',\n            'ml-0',\n            'border-0',\n          ])}\n        >\n          ...\n        </span>\n      </li>\n    );\n  }\n\n  renderPageButton(page) {\n    const { buttonLabels } = this.props;\n    const active = page === this.state.currentPage || null;\n\n    let ariaLabel = `${buttonLabels.page} ${page}`;\n    if (active) {\n      ariaLabel += `, ${buttonLabels.currentPage}`;\n    }\n\n    return (\n      <li\n        className={classNames([\n          'page-item',\n          {\n            active,\n          },\n        ])}\n        key={page}\n      >\n        <Button.Deprecated\n          className=\"page-link\"\n          aria-label={ariaLabel}\n          inputRef={(element) => { this.pageRefs[page] = element; }}\n          onClick={() => { this.handlePageSelect(page); }}\n        >\n          {page.toString()}\n        </Button.Deprecated>\n      </li>\n    );\n  }\n\n  renderPageOfCountButton() {\n    const { currentPage } = this.state;\n    const { pageCount, buttonLabels } = this.props;\n\n    const ariaLabel = `${buttonLabels.page} ${currentPage}, ${buttonLabels.currentPage}, ${buttonLabels.pageOfCount} ${pageCount}`;\n\n    const label = (\n      <span>\n        {`${currentPage} `}\n        {buttonLabels.pageOfCount}\n        {` ${pageCount}`}\n      </span>\n    );\n\n    return (\n      <li\n        className={classNames(['page-item', 'disabled'])}\n        key={currentPage}\n      >\n        <span\n          className={classNames([\n            'btn',\n            'page-link',\n            'mx-2',\n            'border-0',\n          ])}\n          aria-label={ariaLabel}\n        >\n          {label}\n        </span>\n      </li>\n    );\n  }\n\n  renderPreviousButton() {\n    const { buttonLabels, icons } = this.props;\n    const { currentPage } = this.state;\n    const isFirstPage = currentPage === 1;\n    const previousPage = isFirstPage ? null : currentPage - 1;\n\n    let ariaLabel = `${buttonLabels.previous}`;\n    if (previousPage) {\n      ariaLabel += `, ${buttonLabels.page} ${previousPage}`;\n    }\n\n    return (\n      <li\n        className={classNames(\n          'page-item',\n          {\n            disabled: isFirstPage,\n          },\n        )}\n      >\n        <Button.Deprecated\n          className=\"previous page-link\"\n          aria-label={ariaLabel}\n          tabIndex={isFirstPage ? '-1' : undefined}\n          onClick={() => { this.handlePreviousNextButtonClick(previousPage); }}\n          inputRef={(element) => { this.previousButtonRef = element; }}\n          disabled={isFirstPage}\n        >\n          <div>\n            {icons.leftIcon}\n            {buttonLabels.previous}\n          </div>\n        </Button.Deprecated>\n      </li>\n    );\n  }\n\n  renderNextButton() {\n    const { buttonLabels, pageCount, icons } = this.props;\n    const { currentPage } = this.state;\n    const isLastPage = currentPage === pageCount;\n    const nextPage = isLastPage ? null : currentPage + 1;\n\n    let ariaLabel = `${buttonLabels.next}`;\n    if (nextPage) {\n      ariaLabel += `, ${buttonLabels.page} ${nextPage}`;\n    }\n\n    return (\n      <li\n        className={classNames(\n          'page-item',\n          {\n            disabled: isLastPage,\n          },\n        )}\n      >\n        <Button.Deprecated\n          className=\"next page-link\"\n          aria-label={ariaLabel}\n          tabIndex={isLastPage ? '-1' : undefined}\n          onClick={() => { this.handlePreviousNextButtonClick(nextPage); }}\n          inputRef={(element) => { this.nextButtonRef = element; }}\n          disabled={isLastPage}\n        >\n          <div>\n            {buttonLabels.next}\n            {icons.rightIcon}\n          </div>\n        </Button.Deprecated>\n      </li>\n    );\n  }\n\n  renderScreenReaderSection() {\n    const { currentPage } = this.state;\n    const { buttonLabels, pageCount } = this.props;\n\n    const description = `${buttonLabels.page} ${currentPage}, ${buttonLabels.currentPage}, ${buttonLabels.pageOfCount} ${pageCount}`;\n\n    return (\n      <div\n        className=\"sr-only\"\n        aria-live=\"polite\"\n        aria-relevant=\"text\"\n        aria-atomic\n      >\n        {description}\n      </div>\n    );\n  }\n\n  renderPageButtons() {\n    const { currentPage } = this.state;\n    const { pageCount, maxPagesDisplayed } = this.props;\n\n    const pages = getPaginationRange({\n      currentIndex: currentPage,\n      count: pageCount,\n      length: maxPagesDisplayed,\n      requireFirstAndLastPages: true,\n    });\n\n    return pages.map((pageIndex) => {\n      if (pageIndex === ELLIPSIS) {\n        return this.renderEllipsisButton();\n      }\n      return this.renderPageButton(pageIndex + 1);\n    });\n  }\n\n  render() {\n    return (\n      <nav\n        aria-label={this.props.paginationLabel}\n        className={this.props.className}\n      >\n        {this.renderScreenReaderSection()}\n        <ul className=\"pagination\">\n          {this.renderPreviousButton()}\n          <MediaQuery maxWidth={breakpoints.extraSmall.maxWidth}>\n            {this.renderPageOfCountButton()}\n          </MediaQuery>\n          <MediaQuery minWidth={breakpoints.small.minWidth}>\n            {this.renderPageButtons()}\n          </MediaQuery>\n          {this.renderNextButton()}\n        </ul>\n      </nav>\n    );\n  }\n}\n\nPagination.propTypes = {\n  /**\n   * Specifies a callback function that is executed when the\n   * user selects a page button or the `Previous`/`Next` buttons. For example:\n   *\n   * ```jsx\n   *  <Pagination onPageSelect={(pageNumber) => { console.log(pageNumber); } />\n   * ```\n   */\n  onPageSelect: PropTypes.func.isRequired,\n  /** Specifies the total number of pages in the `Pagination` component. */\n  pageCount: PropTypes.number.isRequired,\n  /** Specifies the `aria-label` for the `<nav>` element that wraps the pagination button list. */\n  paginationLabel: PropTypes.string.isRequired,\n  /**\n   * Specifies the labels to use for the `Previous`/`Next`\n   * buttons as well as the various parts of `aria-label`\n   * on the page buttons for accessibility. All button labels\n   * accept both string or elements. The button label options are as follows:\n   *\n   * `previous`: Text for the `Previous` button;\n   *\n   * `next`: Text for the `Next` button;\n   *\n   * `page`: Text in the `aria-label` on page buttons to describe the button (e.g., \"**Page** 1\");\n   *\n   * `currentPage`: Text to depict the selected page in the `aria-label`\n   * on page buttons (e.g., \"Page 1, **Current Page**\");\n   *\n   * `pageOfCount`: Text that separates the current page and total page count\n   * for the mobile UI (e.g., \"Page 1 **of** 20\").\n   *\n   * The default is:\n   * ```javascript\n   * {\n   *   previous: 'Previous',\n   *   next: 'Next',\n   *   page: 'Page',\n   *   currentPage: 'Current Page',\n   *   pageOfCount: 'of',\n   * }\n   * ```\n   */\n  buttonLabels: PropTypes.shape({\n    previous: PropTypes.string,\n    next: PropTypes.string,\n    page: PropTypes.string,\n    currentPage: PropTypes.string,\n    pageOfCount: PropTypes.string,\n  }),\n  /** Specifies any class name(s) for the `Pagination` component. The default is an empty string. */\n  className: PropTypes.string,\n  /** specifies the page that the `Pagination` component will automatically select. The default is `1`. */\n  currentPage: PropTypes.number,\n  /**\n   * Specifies the number of page buttons to display in between the `Previous`\n   * and `Next` buttons. This number also includes any ellipses in the total count.\n   * Also, to ensure that at least one clickable page button is shown when both ellipses\n   * are displayed, this value must be greater than `4`. The default is `7`.\n   */\n  maxPagesDisplayed: between({ gt: 4 }),\n  /**\n   * Specifies icons used to indicate previous and next page. Can be an element,\n   * string, symbol, etc. Default is chevrons rendered using fa-css.\n   */\n  icons: PropTypes.shape({\n    leftIcon: PropTypes.node,\n    rightIcon: PropTypes.node,\n  }),\n};\n\nPagination.defaultProps = {\n  icons: {\n    leftIcon: <Icon className=\"fa fa-chevron-left mr-2\" />,\n    rightIcon: <Icon className=\"fa fa-chevron-right ml-2\" />,\n  },\n  buttonLabels: {\n    previous: 'Previous',\n    next: 'Next',\n    page: 'Page',\n    currentPage: 'Current Page',\n    pageOfCount: 'of',\n  },\n  className: undefined,\n  currentPage: 1,\n  maxPagesDisplayed: 7,\n};\n\nexport default Pagination;\n"],"file":"index.js"}