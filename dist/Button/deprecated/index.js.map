{"version":3,"sources":["../../../src/Button/deprecated/index.jsx"],"names":["React","classNames","PropTypes","withDeprecatedProps","DEPR_TYPES","Button","props","onBlur","onKeyDown","bind","onClick","setRefs","e","buttonRef","focus","input","inputRef","buttonType","className","children","isClose","type","other","undefined","close","Component","buttonPropTypes","string","node","isRequired","oneOfType","func","shape","current","instanceOf","element","bool","propTypes","defaultProps","label","deprType","MOVED","newName","FORMAT","expect","value","transform","Array","isArray","join","message"],"mappings":"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","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport withDeprecatedProps, { DEPR_TYPES } from '../../withDeprecatedProps';\n\nclass Button extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const {\n      onBlur,\n      onKeyDown,\n    } = props;\n\n    this.onBlur = onBlur.bind(this);\n    this.onKeyDown = onKeyDown.bind(this);\n    this.onClick = this.onClick.bind(this);\n    this.setRefs = this.setRefs.bind(this);\n  }\n\n  /*\n    The button component is given focus explicitly in its onClick to account\n    for the fact that an HTML <button> element in Firefox and Safari does not get\n    focus on onClick.\n\n    See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button.\n  */\n  onClick(e) {\n    this.buttonRef.focus();\n    this.props.onClick(e);\n  }\n\n  /*\n    The button component needs a ref to itself to be able to force\n    focus in its onClick function (buttonRef). It also needs to accept\n    a callback function from parent components to give those parents\n    a reference to their child button (e.g. for the modal component).\n    Therefore, both have been wrapped in a function bound on the class,\n    since one cannot set two ref attributes on a component.\n  */\n  setRefs(input) {\n    this.buttonRef = input;\n    this.props.inputRef(input);\n  }\n\n  render() {\n    const {\n      buttonType,\n      className,\n      children,\n      isClose,\n      type,\n      /* inputRef is not used directly in the render, but it needs to be assigned\n        here to prevent it from being passed to the HTML button component as part\n        of other.\n      */\n      inputRef,\n      ...other\n    } = this.props;\n\n    return (\n      <button\n        {...other}\n        className={classNames([\n          'btn',\n          className,\n        ], {\n          [`btn-${buttonType}`]: buttonType !== undefined,\n        }, {\n          close: isClose,\n        })}\n        onBlur={this.onBlur}\n        onClick={this.onClick}\n        onKeyDown={this.onKeyDown}\n        // eslint-disable-next-line react/button-has-type\n        type={type}\n        ref={this.setRefs}\n\n      >\n        {children}\n      </button>\n    );\n  }\n}\n\nexport const buttonPropTypes = {\n  /** Used to determine the type of button to be rendered.  See [Bootstrap's buttons documentation](https://getbootstrap.com/docs/4.0/components/buttons/) for a list of applicable button types. For example, `buttonType=\"light\"`. The default is `undefined`. */\n  buttonType: PropTypes.string,\n  /** Specifies Bootstrap class names to apply to the button. See [Bootstrap's buttons documentation](https://getbootstrap.com/docs/4.0/components/buttons/) for a list of applicable class names. The default is an empty array. */\n  className: PropTypes.string,\n  /** Specifies the text that is displayed within the button. */\n  children: PropTypes.node.isRequired,\n  // eslint-disable-next-line max-len\n  /** A function that defines a reference for the button. An example `inputRef` from the calling component could look something like: `inputRef={(input) => { this.button = input; }}`. The default is an empty function. */\n  inputRef: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.shape({ current: PropTypes.instanceOf(PropTypes.element) }),\n  ]),\n  /** Used to determine if the button is a \"Close\" style button to leverage bootstrap styling. Example use case is with the Status Alert [dismiss button](https://getbootstrap.com/docs/4.0/components/alerts/#dismissing). The default is false. */\n  isClose: PropTypes.bool,\n  // eslint-disable-next-line max-len\n  /** A function that would specify what the button should do when the `onBlur` event is triggered. For example, the button could change in color or `buttonType` when focus is changed. The default is an empty function. */\n  onBlur: PropTypes.func,\n  // eslint-disable-next-line max-len\n  /** A function that would specify what the button should do when the `onClick` event is triggered. For example, the button could launch a `Modal`. The default is an empty function. */\n  onClick: PropTypes.func,\n  // eslint-disable-next-line max-len\n  /** A function that would specify what the button should do when the `onKeyDown` event is triggered.  For example, this could handle using the `Escape` key to trigger the button's action. The default is an empty function. */\n  onKeyDown: PropTypes.func,\n  /** Used to set the `type` attribute on the `button` tag.  The default type is `button`. */\n  type: PropTypes.string,\n};\n\nButton.propTypes = buttonPropTypes;\n\nButton.defaultProps = {\n  buttonType: undefined,\n  className: undefined,\n  inputRef: () => {},\n  isClose: false,\n  onBlur: () => {},\n  onKeyDown: () => {},\n  onClick: () => {},\n  type: 'button',\n};\n\nexport default withDeprecatedProps(Button, 'Button', {\n  label: {\n    deprType: DEPR_TYPES.MOVED,\n    newName: 'children',\n  },\n  className: {\n    deprType: DEPR_TYPES.FORMAT,\n    expect: value => typeof value === 'string',\n    transform: value => (Array.isArray(value) ? value.join(' ') : value),\n    message: 'It should be a string.',\n  },\n});\n"],"file":"index.js"}