{"version":3,"sources":["../../src/Alert/index.jsx"],"names":["React","useCallback","useEffect","useState","PropTypes","classNames","BaseAlert","divWithClassName","FormattedMessage","useMediaQuery","Icon","breakpoints","Button","ActionRow","Alert","forwardRef","ref","children","icon","actions","dismissible","onClose","closeLabel","stacked","props","isStacked","setIsStacked","isExtraSmall","maxWidth","extraSmall","actionButtonSize","cloneActionElement","Action","addtlActionProps","size","key","cloneElement","className","length","map","DivStyledAsH4","displayName","AlertHeading","AlertLink","commonPropTypes","as","elementType","bsPrefix","string","propTypes","defaultProps","node","func","show","bool","arrayOf","element","undefined","Heading","Link"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport BaseAlert from 'react-bootstrap/Alert';\nimport divWithClassName from 'react-bootstrap/divWithClassName';\nimport { FormattedMessage } from 'react-intl';\nimport { useMediaQuery } from 'react-responsive';\nimport { Icon } from '..';\nimport breakpoints from '../utils/breakpoints';\nimport Button from '../Button';\nimport ActionRow from '../ActionRow';\n\nconst Alert = React.forwardRef(({\n  children,\n  icon,\n  actions,\n  dismissible,\n  onClose,\n  closeLabel,\n  stacked,\n  ...props\n}, ref) => {\n  const [isStacked, setIsStacked] = useState(stacked);\n  const isExtraSmall = useMediaQuery({ maxWidth: breakpoints.extraSmall.maxWidth });\n  const actionButtonSize = 'sm';\n\n  useEffect(() => {\n    if (isExtraSmall) {\n      setIsStacked(true);\n    } else {\n      setIsStacked(stacked);\n    }\n  }, [isExtraSmall, stacked]);\n\n  const cloneActionElement = useCallback(\n    (Action) => {\n      const addtlActionProps = { size: actionButtonSize, key: Action.props.children };\n      return React.cloneElement(Action, addtlActionProps);\n    },\n    [],\n  );\n\n  return (\n    <BaseAlert\n      {...props}\n      className={classNames('alert-content', props.className)}\n      ref={ref}\n    >\n      {icon && <Icon src={icon} className=\"alert-icon\" />}\n      <div\n        className={classNames({\n          'pgn__alert-message-wrapper': !isStacked,\n          'pgn__alert-message-wrapper-stacked': isStacked,\n        })}\n      >\n        <div className=\"alert-message-content\">\n          {children}\n        </div>\n        {(dismissible || actions?.length > 0) && (\n          <ActionRow className=\"pgn__alert-actions\">\n            <ActionRow.Spacer />\n            {dismissible && (\n              <Button\n                size={actionButtonSize}\n                variant=\"tertiary\"\n                onClick={onClose}\n              >\n                <FormattedMessage\n                  id=\"pgn.Alert.closeLabel\"\n                  defaultMessage={closeLabel}\n                  description=\"Label of a close button on Alert component\"\n                />\n              </Button>\n            )}\n            {actions && actions.map(cloneActionElement)}\n          </ActionRow>\n        )}\n      </div>\n    </BaseAlert>\n  );\n});\n\n// This is needed to display a default prop for Alert.Heading element\n// Copied from react-bootstrap since BaseAlert.Heading component doesn't have defaultProps,\n// so there seems to be no other way of providing correct default prop for base element\nconst DivStyledAsH4 = divWithClassName('h4');\nDivStyledAsH4.displayName = 'DivStyledAsH4';\n\nconst AlertHeading = (props) => <BaseAlert.Heading {...props} />;\nconst AlertLink = (props) => <BaseAlert.Link {...props} />;\n\nconst commonPropTypes = {\n  /** Specifies the base element */\n  as: PropTypes.elementType,\n  /** Overrides underlying component base CSS class name */\n  bsPrefix: PropTypes.string,\n};\n\nAlertLink.propTypes = commonPropTypes;\nAlertHeading.propTypes = commonPropTypes;\n\nAlertLink.defaultProps = {\n  as: 'a',\n  bsPrefix: 'alert-link',\n};\n\nAlertHeading.defaultProps = {\n  as: DivStyledAsH4,\n  bsPrefix: 'alert-heading',\n};\n\nAlert.propTypes = {\n  ...BaseAlert.propTypes,\n  /** Docstring for the children prop */\n  children: PropTypes.node,\n  /** Docstring for the icon prop... Icon that will be shown in the alert */\n  icon: PropTypes.func,\n  /** Whether the alert is shown. */\n  show: PropTypes.bool,\n  /** Whether the alert is dismissible. Defaults to true. */\n  dismissible: PropTypes.bool,\n  /** Optional callback function for when the alert it dismissed. */\n  onClose: PropTypes.func,\n  /** Optional list of action elements. May include, at most, 2 actions, or 1 if dismissible is true. */\n  actions: PropTypes.arrayOf(PropTypes.element),\n  /** Position of the dismiss and call-to-action buttons. Defaults to ``false``. */\n  stacked: PropTypes.bool,\n  /** Sets the text for alert close button. */\n  closeLabel: PropTypes.string,\n};\n\nAlert.defaultProps = {\n  ...BaseAlert.defaultProps,\n  children: undefined,\n  icon: undefined,\n  actions: undefined,\n  dismissible: false,\n  onClose: () => {},\n  closeLabel: 'Dismiss',\n  show: true,\n  stacked: false,\n};\n\nAlert.Heading = AlertHeading;\nAlert.Link = AlertLink;\n\nexport default Alert;\n"],"file":"index.js"}