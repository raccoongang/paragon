{"version":3,"sources":["../../src/Form/FormGroup.jsx"],"names":["React","PropTypes","classNames","FormGroupContextProvider","FormGroup","children","controlId","isInvalid","isValid","size","as","props","createElement","className","SIZE_CHOICES","propTypes","node","isRequired","string","elementType","bool","oneOf","defaultProps","undefined"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,wBAAT,QAAyC,oBAAzC;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA,MAChBC,QADgB,QAChBA,QADgB;AAAA,MAEhBC,SAFgB,QAEhBA,SAFgB;AAAA,MAGhBC,SAHgB,QAGhBA,SAHgB;AAAA,MAIhBC,OAJgB,QAIhBA,OAJgB;AAAA,MAKhBC,IALgB,QAKhBA,IALgB;AAAA,MAMhBC,EANgB,QAMhBA,EANgB;AAAA,MAObC,KAPa;;AAAA,sBAQZX,KAAK,CAACY,aAAN,CAAoBF,EAApB,kCACDC,KADC;AAEJE,IAAAA,SAAS,EAAEX,UAAU,CAAC,iBAAD,EAAoBS,KAAK,CAACE,SAA1B;AAFjB,mBAIJ,oBAAC,wBAAD;AACE,IAAA,SAAS,EAAEP,SADb;AAEE,IAAA,SAAS,EAAEC,SAFb;AAGE,IAAA,OAAO,EAAEC,OAHX;AAIE,IAAA,IAAI,EAAEC;AAJR,KAMGJ,QANH,CAJI,CARY;AAAA,CAAlB;;AAsBA,IAAMS,YAAY,GAAG,CAAC,IAAD,EAAO,IAAP,CAArB;AAEAV,SAAS,CAACW,SAAV,GAAsB;AACpB;AACAV,EAAAA,QAAQ,EAAEJ,SAAS,CAACe,IAAV,CAAeC,UAFL;;AAGpB;AACAJ,EAAAA,SAAS,EAAEZ,SAAS,CAACiB,MAJD;;AAKpB;AACAR,EAAAA,EAAE,EAAET,SAAS,CAACkB,WANM;;AAOpB;AACF;AACEb,EAAAA,SAAS,EAAEL,SAAS,CAACiB,MATD;;AAUpB;AACAX,EAAAA,SAAS,EAAEN,SAAS,CAACmB,IAXD;;AAYpB;AACAZ,EAAAA,OAAO,EAAEP,SAAS,CAACmB,IAbC;;AAcpB;AACAX,EAAAA,IAAI,EAAER,SAAS,CAACoB,KAAV,CAAgBP,YAAhB;AAfc,CAAtB;AAkBAV,SAAS,CAACkB,YAAV,GAAyB;AACvBZ,EAAAA,EAAE,EAAE,KADmB;AAEvBG,EAAAA,SAAS,EAAEU,SAFY;AAGvBjB,EAAAA,SAAS,EAAEiB,SAHY;AAIvBhB,EAAAA,SAAS,EAAE,KAJY;AAKvBC,EAAAA,OAAO,EAAE,KALc;AAMvBC,EAAAA,IAAI,EAAEc;AANiB,CAAzB;AASA,eAAenB,SAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { FormGroupContextProvider } from './FormGroupContext';\n\nconst FormGroup = ({\n  children,\n  controlId,\n  isInvalid,\n  isValid,\n  size,\n  as,\n  ...props\n}) => React.createElement(as, {\n  ...props,\n  className: classNames('pgn__form-group', props.className),\n}, (\n  <FormGroupContextProvider\n    controlId={controlId}\n    isInvalid={isInvalid}\n    isValid={isValid}\n    size={size}\n  >\n    {children}\n  </FormGroupContextProvider>\n));\n\nconst SIZE_CHOICES = ['sm', 'lg'];\n\nFormGroup.propTypes = {\n  /** Specifies contents of the component. */\n  children: PropTypes.node.isRequired,\n  /** Specifies class name to append to the base element. */\n  className: PropTypes.string,\n  /** Specifies base element for the component. */\n  as: PropTypes.elementType,\n  /** Specifies id to use in the group, it will be used as `htmlFor` in `FormLabel` and as `id` in input components.\n   *  Will be autogenerated if none is supplied. */\n  controlId: PropTypes.string,\n  /** Specifies whether to display components in invalid state, this affects styling. */\n  isInvalid: PropTypes.bool,\n  /** Specifies whether to display components in valid state, this affects styling. */\n  isValid: PropTypes.bool,\n  /** Specifies size for the component. */\n  size: PropTypes.oneOf(SIZE_CHOICES),\n};\n\nFormGroup.defaultProps = {\n  as: 'div',\n  className: undefined,\n  controlId: undefined,\n  isInvalid: false,\n  isValid: false,\n  size: undefined,\n};\n\nexport default FormGroup;\n"],"file":"FormGroup.js"}