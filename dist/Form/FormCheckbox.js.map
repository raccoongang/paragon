{"version":3,"sources":["../../src/Form/FormCheckbox.jsx"],"names":["React","PropTypes","classNames","useCheckboxSetContext","FormGroupContextProvider","useFormGroupContext","FormLabel","FormControlFeedback","CheckboxControl","forwardRef","ref","isIndeterminate","props","defaultRef","useRef","resolvedRef","getControlProps","checkboxProps","className","useEffect","current","indeterminate","propTypes","bool","string","defaultProps","undefined","FormCheckbox","children","controlClassName","labelClassName","description","isInvalid","isValid","controlAs","floatLabelLeft","getCheckboxControlProps","hasCheckboxSetProvider","hasFormGroupProvider","useSetIsControlGroupEffect","shouldActAsGroup","groupProps","role","checkboxInputProps","control","createElement","id","disabled","node","isRequired","elementType"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { useCheckboxSetContext } from './FormCheckboxSetContext';\nimport { FormGroupContextProvider, useFormGroupContext } from './FormGroupContext';\nimport FormLabel from './FormLabel';\nimport FormControlFeedback from './FormControlFeedback';\n\nconst CheckboxControl = React.forwardRef(\n  ({ isIndeterminate, ...props }, ref) => {\n    const defaultRef = React.useRef();\n    const resolvedRef = ref || defaultRef;\n    const { getControlProps } = useFormGroupContext();\n    const checkboxProps = getControlProps({\n      ...props,\n      className: classNames('pgn__form-checkbox-input', props.className),\n    });\n    React.useEffect(() => {\n      // this if(resolvedRef.current) prevents console errors in testing\n      if (resolvedRef.current) {\n        resolvedRef.current.indeterminate = isIndeterminate;\n      }\n    }, [resolvedRef, isIndeterminate]);\n\n    return (\n      <input\n        type=\"checkbox\"\n        {...checkboxProps}\n        ref={resolvedRef}\n      />\n    );\n  },\n);\n\nCheckboxControl.propTypes = {\n  /** Specifies whether the checkbox should be rendered in indeterminate state. */\n  isIndeterminate: PropTypes.bool,\n  /** Specifies class name to append to the base element. */\n  className: PropTypes.string,\n};\n\nCheckboxControl.defaultProps = {\n  isIndeterminate: false,\n  className: undefined,\n};\n\nconst FormCheckbox = React.forwardRef(({\n  children,\n  className,\n  controlClassName,\n  labelClassName,\n  description,\n  isInvalid,\n  isValid,\n  controlAs,\n  floatLabelLeft,\n  ...props\n}, ref) => {\n  const { getCheckboxControlProps, hasCheckboxSetProvider } = useCheckboxSetContext();\n  const { hasFormGroupProvider, useSetIsControlGroupEffect, getControlProps } = useFormGroupContext();\n  useSetIsControlGroupEffect(true);\n  const shouldActAsGroup = hasFormGroupProvider && !hasCheckboxSetProvider;\n  const groupProps = shouldActAsGroup ? {\n    ...getControlProps({}),\n    role: 'group',\n  } : {};\n  const checkboxInputProps = getCheckboxControlProps({\n    ...props,\n    className: controlClassName,\n  });\n  const control = React.createElement(controlAs, { ...checkboxInputProps, ref });\n  return (\n    <FormGroupContextProvider\n      controlId={checkboxInputProps.id}\n      isInvalid={isInvalid}\n      isValid={isValid}\n    >\n      <div\n        className={classNames('pgn__form-checkbox', className, {\n          'pgn__form-control-valid': isValid,\n          'pgn__form-control-invalid': isInvalid,\n          'pgn__form-control-disabled': checkboxInputProps.disabled,\n          'pgn__form-control-label-left': !!floatLabelLeft,\n        })}\n        {...groupProps}\n      >\n        {control}\n        <div>\n          <FormLabel className={labelClassName}>\n            {children}\n          </FormLabel>\n          {description && (\n            <FormControlFeedback hasIcon={false}>\n              {description}\n            </FormControlFeedback>\n          )}\n        </div>\n      </div>\n    </FormGroupContextProvider>\n  );\n});\n\nFormCheckbox.propTypes = {\n  /** Specifies contents of the component. */\n  children: PropTypes.node.isRequired,\n  /** Specifies class name to append to the base element. */\n  className: PropTypes.string,\n  /** Specifies class name for control component. */\n  controlClassName: PropTypes.string,\n  /** Specifies class name for label component. */\n  labelClassName: PropTypes.string,\n  /** Specifies description to show under the checkbox. */\n  description: PropTypes.node,\n  /** Specifies whether to display checkbox in invalid state, this affects styling. */\n  isInvalid: PropTypes.bool,\n  /** Specifies whether to display checkbox in valid state, this affects styling. */\n  isValid: PropTypes.bool,\n  /** Specifies control element. */\n  controlAs: PropTypes.elementType,\n  floatLabelLeft: PropTypes.bool,\n};\n\nFormCheckbox.defaultProps = {\n  className: undefined,\n  controlClassName: undefined,\n  labelClassName: undefined,\n  description: undefined,\n  isInvalid: false,\n  isValid: false,\n  controlAs: CheckboxControl,\n  floatLabelLeft: false,\n};\n\nexport { CheckboxControl };\nexport default FormCheckbox;\n"],"file":"FormCheckbox.js"}