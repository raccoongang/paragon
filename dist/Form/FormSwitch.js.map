{"version":3,"sources":["../../src/Form/FormSwitch.jsx"],"names":["React","PropTypes","classNames","FormCheckbox","useFormGroupContext","SwitchControl","forwardRef","ref","isIndeterminate","props","defaultRef","useRef","resolvedRef","getControlProps","checkboxProps","className","useEffect","current","indeterminate","propTypes","bool","string","defaultProps","undefined","FormSwitch","children","helperText","node","isRequired","labelClassName","floatLabelLeft"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport FormCheckbox from './FormCheckbox';\nimport { useFormGroupContext } from './FormGroupContext';\n\nconst SwitchControl = React.forwardRef(\n  ({ isIndeterminate, ...props }, ref) => {\n    const defaultRef = React.useRef();\n    const resolvedRef = ref || defaultRef;\n    const { getControlProps } = useFormGroupContext();\n    const checkboxProps = getControlProps({\n      ...props,\n      className: classNames(\n        'pgn__form-switch-input',\n        props.className,\n      ),\n    });\n\n    React.useEffect(() => {\n      // this if(resolvedRef.current) prevents console errors in testing\n      if (resolvedRef.current) {\n        resolvedRef.current.indeterminate = isIndeterminate;\n      }\n    }, [resolvedRef, isIndeterminate]);\n\n    return (\n      <input\n        type=\"checkbox\"\n        {...checkboxProps}\n        ref={resolvedRef}\n      />\n    );\n  },\n);\n\nSwitchControl.propTypes = {\n  /** Specifies whether input should be rendered in indeterminate state. */\n  isIndeterminate: PropTypes.bool,\n  /** Specifies class name to append to the base element. */\n  className: PropTypes.string,\n};\n\nSwitchControl.defaultProps = {\n  isIndeterminate: false,\n  className: undefined,\n};\n\nconst FormSwitch = React.forwardRef(({\n  children,\n  className,\n  helperText,\n  ...props\n}, ref) => (\n  <div className=\"d-inline-flex flex-column\">\n    <FormCheckbox\n      className={classNames('pgn__form-switch', className)}\n      {...props}\n      role=\"switch\"\n      ref={ref}\n      controlAs={SwitchControl}\n      // ignore the following props for form switch\n      isValid={null}\n      isInvalid={null}\n      description={null}\n    >\n      {children}\n    </FormCheckbox>\n    {helperText && (\n      <div className=\"pgn__form-switch-helper-text\">\n        {helperText}\n      </div>\n    )}\n  </div>\n));\n\nFormSwitch.propTypes = {\n  /** Specifies contents of the component. */\n  children: PropTypes.node.isRequired,\n  /** Specifies class name to append to the base element. */\n  className: PropTypes.string,\n  labelClassName: PropTypes.string,\n  helperText: PropTypes.node,\n  floatLabelLeft: PropTypes.bool,\n};\n\nFormSwitch.defaultProps = {\n  className: undefined,\n  labelClassName: undefined,\n  helperText: undefined,\n  floatLabelLeft: false,\n};\n\nexport { SwitchControl };\nexport default FormSwitch;\n"],"file":"FormSwitch.js"}