{"version":3,"sources":["../../src/Form/FormCheckboxSetContext.jsx"],"names":["React","useContext","PropTypes","callAllHandlers","identityFn","props","FormCheckboxSetContext","createContext","getCheckboxControlProps","hasCheckboxSetProvider","useCheckboxSetContext","FormCheckboxSetContextProvider","children","name","onBlur","onFocus","onChange","value","defaultValue","isControlled","Array","isArray","checkboxProps","checked","includes","undefined","defaultChecked","contextValue","propTypes","node","isRequired","string","func","arrayOf","defaultProps"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { callAllHandlers } from './fieldUtils';\n\nconst identityFn = props => props;\n\nconst FormCheckboxSetContext = React.createContext({\n  getCheckboxControlProps: identityFn,\n  hasCheckboxSetProvider: false,\n});\n\nconst useCheckboxSetContext = () => useContext(FormCheckboxSetContext);\n\nconst FormCheckboxSetContextProvider = ({\n  children,\n  name,\n  onBlur,\n  onFocus,\n  onChange,\n  value,\n  defaultValue,\n}) => {\n  const isControlled = !defaultValue && Array.isArray(value);\n  const getCheckboxControlProps = (checkboxProps) => ({\n    ...checkboxProps,\n    name,\n    /* istanbul ignore next */\n    onBlur: checkboxProps.onBlur ? callAllHandlers(onBlur, checkboxProps.onBlur) : onBlur,\n    /* istanbul ignore next */\n    onFocus: checkboxProps.onFocus ? callAllHandlers(onFocus, checkboxProps.onFocus) : onFocus,\n    /* istanbul ignore next */\n    onChange: checkboxProps.onChange ? callAllHandlers(onChange, checkboxProps.onChange) : onChange,\n    checked: isControlled ? value.includes(checkboxProps.value) : undefined,\n    defaultChecked: isControlled ? undefined : (defaultValue && defaultValue.includes(checkboxProps.value)),\n  });\n  const contextValue = {\n    name,\n    value,\n    defaultValue,\n    getCheckboxControlProps,\n    onBlur,\n    onFocus,\n    onChange,\n    hasCheckboxSetProvider: true,\n  };\n  return (\n    <FormCheckboxSetContext.Provider value={contextValue}>\n      {children}\n    </FormCheckboxSetContext.Provider>\n  );\n};\n\nFormCheckboxSetContextProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n  name: PropTypes.string,\n  onBlur: PropTypes.func,\n  onFocus: PropTypes.func,\n  onChange: PropTypes.func,\n  value: PropTypes.arrayOf(PropTypes.string),\n  defaultValue: PropTypes.arrayOf(PropTypes.string),\n};\n\nFormCheckboxSetContextProvider.defaultProps = {\n  onBlur: undefined,\n  name: undefined,\n  onFocus: undefined,\n  onChange: undefined,\n  value: undefined,\n  defaultValue: undefined,\n};\n\nexport default FormCheckboxSetContext;\nexport {\n  useCheckboxSetContext,\n  FormCheckboxSetContextProvider,\n};\n"],"file":"FormCheckboxSetContext.js"}