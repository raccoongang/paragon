{"version":3,"sources":["../../src/Form/FormControlFeedback.jsx"],"names":["React","PropTypes","classNames","useFormGroupContext","FormText","resolveTextType","FormControlFeedback","children","props","getDescriptorProps","isInvalid","isValid","descriptorProps","className","textType","type","FEEDBACK_TYPES","propTypes","node","isRequired","string","hasIcon","bool","oneOf","icon","muted","defaultProps","undefined"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,mBAAT,QAAoC,oBAApC;AACA,OAAOC,QAAP,IAAmBC,eAAnB,QAA0C,YAA1C;;AAEA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,OAA4B;AAAA,MAAzBC,QAAyB,QAAzBA,QAAyB;AAAA,MAAZC,KAAY;;AACtD,6BAAmDL,mBAAmB,EAAtE;AAAA,MAAQM,kBAAR,wBAAQA,kBAAR;AAAA,MAA4BC,SAA5B,wBAA4BA,SAA5B;AAAA,MAAuCC,OAAvC,wBAAuCA,OAAvC;;AACA,MAAMC,eAAe,GAAGH,kBAAkB,CAACD,KAAD,CAA1C;AACA,MAAMK,SAAS,GAAGX,UAAU,CAAC,+BAAD,EAAkCM,KAAK,CAACK,SAAxC,CAA5B;AACA,MAAMC,QAAQ,GAAGN,KAAK,CAACO,IAAN,IAAcV,eAAe,CAAC;AAAEK,IAAAA,SAAS,EAATA,SAAF;AAAaC,IAAAA,OAAO,EAAPA;AAAb,GAAD,CAA9C;AACA,sBACE,oBAAC,QAAD,eACMC,eADN;AAEE,IAAA,SAAS,EAAEC,SAFb;AAGE,IAAA,IAAI,EAAEC;AAHR,MAKGP,QALH,CADF;AASD,CAdD;;AAgBA,IAAMS,cAAc,GAAG,CACrB,SADqB,EAErB,OAFqB,EAGrB,SAHqB,EAIrB,SAJqB,EAKrB,gBALqB,EAMrB,gBANqB,EAOrB,kBAPqB,CAAvB;AAUAV,mBAAmB,CAACW,SAApB,GAAgC;AAC9B;AACAV,EAAAA,QAAQ,EAAEN,SAAS,CAACiB,IAAV,CAAeC,UAFK;;AAG9B;AACAN,EAAAA,SAAS,EAAEZ,SAAS,CAACmB,MAJS;;AAK9B;AACAC,EAAAA,OAAO,EAAEpB,SAAS,CAACqB,IANW;;AAO9B;AACAP,EAAAA,IAAI,EAAEd,SAAS,CAACsB,KAAV,CAAgBP,cAAhB,CARwB;;AAS9B;AACAQ,EAAAA,IAAI,EAAEvB,SAAS,CAACiB,IAVc;;AAW9B;AACAO,EAAAA,KAAK,EAAExB,SAAS,CAACqB;AAZa,CAAhC;AAeAhB,mBAAmB,CAACoB,YAApB,GAAmC;AACjCL,EAAAA,OAAO,EAAE,IADwB;AAEjCN,EAAAA,IAAI,EAAEY,SAF2B;AAGjCH,EAAAA,IAAI,EAAEG,SAH2B;AAIjCd,EAAAA,SAAS,EAAEc,SAJsB;AAKjCF,EAAAA,KAAK,EAAE;AAL0B,CAAnC;AAQA,eAAenB,mBAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { useFormGroupContext } from './FormGroupContext';\nimport FormText, { resolveTextType } from './FormText';\n\nconst FormControlFeedback = ({ children, ...props }) => {\n  const { getDescriptorProps, isInvalid, isValid } = useFormGroupContext();\n  const descriptorProps = getDescriptorProps(props);\n  const className = classNames('pgn__form-control-description', props.className);\n  const textType = props.type || resolveTextType({ isInvalid, isValid });\n  return (\n    <FormText\n      {...descriptorProps}\n      className={className}\n      type={textType}\n    >\n      {children}\n    </FormText>\n  );\n};\n\nconst FEEDBACK_TYPES = [\n  'default',\n  'valid',\n  'invalid',\n  'warning',\n  'criteria-empty',\n  'criteria-valid',\n  'criteria-invalid',\n];\n\nFormControlFeedback.propTypes = {\n  /** Specifies contents of the component. */\n  children: PropTypes.node.isRequired,\n  /** Specifies class name to append to the base element. */\n  className: PropTypes.string,\n  /** Specifies whether to show an icon next to the text. */\n  hasIcon: PropTypes.bool,\n  /** Specifies feedback type, this affects styling. */\n  type: PropTypes.oneOf(FEEDBACK_TYPES),\n  /** Specifies icon to show, will only be shown if `hasIcon` prop is set to `true`. */\n  icon: PropTypes.node,\n  /** Specifies whether to show feedback with muted styling. */\n  muted: PropTypes.bool,\n};\n\nFormControlFeedback.defaultProps = {\n  hasIcon: true,\n  type: undefined,\n  icon: undefined,\n  className: undefined,\n  muted: false,\n};\n\nexport default FormControlFeedback;\n"],"file":"FormControlFeedback.js"}