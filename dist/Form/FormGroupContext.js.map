{"version":3,"sources":["../../src/Form/FormGroupContext.jsx"],"names":["React","useState","useEffect","useMemo","useCallback","PropTypes","classNames","newId","useIdList","omitUndefinedProperties","FORM_CONTROL_SIZES","identityFn","props","noop","FormGroupContext","createContext","getControlProps","useSetIsControlGroupEffect","getLabelProps","getDescriptorProps","hasFormGroupProvider","useFormGroupContext","useContext","useStateEffect","initialState","state","setState","useSetStateEffect","newState","FormGroupContextProvider","children","explicitControlId","controlId","isInvalid","isValid","size","describedByIds","useRegisteredDescriptorId","labelledByIds","useRegisteredLabellerId","isControlGroup","controlProps","labelledByIdsForControl","undefined","id","labelProps","htmlFor","descriptorProps","contextValue","propTypes","node","isRequired","string","bool","oneOf","SMALL","LARGE","defaultProps"],"mappings":"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","sourcesContent":["import React, {\n  useState, useEffect, useMemo, useCallback,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { newId } from '../utils';\nimport { useIdList, omitUndefinedProperties } from './fieldUtils';\nimport { FORM_CONTROL_SIZES } from './constants';\n\nconst identityFn = props => props;\nconst noop = () => {};\n\nconst FormGroupContext = React.createContext({\n  getControlProps: identityFn,\n  useSetIsControlGroupEffect: noop,\n  getLabelProps: identityFn,\n  getDescriptorProps: identityFn,\n  hasFormGroupProvider: false,\n});\n\nconst useFormGroupContext = () => React.useContext(FormGroupContext);\n\nconst useStateEffect = (initialState) => {\n  const [state, setState] = useState(initialState);\n  const useSetStateEffect = (newState) => {\n    useEffect(() => setState(newState), [newState]);\n  };\n  return [state, useSetStateEffect];\n};\n\nconst FormGroupContextProvider = ({\n  children,\n  controlId: explicitControlId,\n  isInvalid,\n  isValid,\n  size,\n}) => {\n  const controlId = useMemo(() => explicitControlId || newId('form-field'), [explicitControlId]);\n  const [describedByIds, useRegisteredDescriptorId] = useIdList(controlId);\n  const [labelledByIds, useRegisteredLabellerId] = useIdList(controlId);\n  const [isControlGroup, useSetIsControlGroupEffect] = useStateEffect(false);\n\n  const getControlProps = useCallback((controlProps) => {\n    // labelledByIds from the list above should only be added to a control\n    // if it the control is a group. We prefer adding a condition here because:\n    //    - Hooks cannot be called inside conditionals\n    //    - The getLabelProps function below is forced to generate an id\n    //      whether it is needed or not.\n    //    - This is what allows consumers of Paragon to use <Form.Label>\n    //      interchangeably between ControlGroup type controls and regular Controls\n    const labelledByIdsForControl = isControlGroup ? labelledByIds : undefined;\n    return omitUndefinedProperties({\n      ...controlProps,\n      'aria-describedby': classNames(controlProps['aria-describedby'], describedByIds) || undefined,\n      'aria-labelledby': classNames(controlProps['aria-labelledby'], labelledByIdsForControl) || undefined,\n      id: controlId,\n    });\n  }, [\n    isControlGroup,\n    describedByIds,\n    labelledByIds,\n    controlId,\n  ]);\n\n  const getLabelProps = (labelProps) => {\n    const id = useRegisteredLabellerId(labelProps?.id);\n    if (isControlGroup) {\n      return { ...labelProps, id };\n    }\n    return { ...labelProps, htmlFor: controlId };\n  };\n\n  const getDescriptorProps = (descriptorProps) => {\n    const id = useRegisteredDescriptorId(descriptorProps?.id);\n    return { ...descriptorProps, id };\n  };\n\n  const contextValue = {\n    getControlProps,\n    getLabelProps,\n    getDescriptorProps,\n    useSetIsControlGroupEffect,\n    isControlGroup,\n    controlId,\n    isInvalid,\n    isValid,\n    size,\n    hasFormGroupProvider: true,\n  };\n\n  return (\n    <FormGroupContext.Provider value={contextValue}>\n      {children}\n    </FormGroupContext.Provider>\n  );\n};\n\nFormGroupContextProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n  controlId: PropTypes.string,\n  isInvalid: PropTypes.bool,\n  isValid: PropTypes.bool,\n  size: PropTypes.oneOf([\n    FORM_CONTROL_SIZES.SMALL,\n    FORM_CONTROL_SIZES.LARGE,\n  ]),\n};\n\nFormGroupContextProvider.defaultProps = {\n  controlId: undefined,\n  isInvalid: undefined,\n  isValid: undefined,\n  size: undefined,\n};\n\nexport {\n  FormGroupContext,\n  FormGroupContextProvider,\n  useFormGroupContext,\n};\n"],"file":"FormGroupContext.js"}