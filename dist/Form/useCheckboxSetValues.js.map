{"version":3,"sources":["../../src/Form/useCheckboxSetValues.jsx"],"names":["useReducer","checkboxValuesReducer","state","action","type","value","filter","useCheckboxSetValues","initialState","dispatch","dispatchers","add","remove","set","clear"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,OAA3B;;AAEA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,KAAD,EAAQC,MAAR,EAAmB;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,KAAL;AACE,0CAAWF,KAAX,IAAkBC,MAAM,CAACE,KAAzB;;AACF,SAAK,QAAL;AACE,aAAOH,KAAK,CAACI,MAAN,CAAa,UAAAD,KAAK;AAAA,eAAIA,KAAK,KAAKF,MAAM,CAACE,KAArB;AAAA,OAAlB,CAAP;;AACF,SAAK,KAAL;AACE,gCAAWF,MAAM,CAACE,KAAlB;;AACF,SAAK,OAAL;AACA;AACE,aAAO,EAAP;AATJ;AAWD,CAZD;;AAcA,IAAME,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAuB;AAAA,MAAtBC,YAAsB,uEAAP,EAAO;;AAClD,oBAA0BR,UAAU,CAACC,qBAAD,EAAwBO,YAAxB,CAApC;AAAA;AAAA,MAAON,KAAP;AAAA,MAAcO,QAAd;;AAEA,MAAMC,WAAW,GAAG;AAClBC,IAAAA,GAAG,EAAE,aAACN,KAAD;AAAA,aAAWI,QAAQ,CAAC;AAAEL,QAAAA,IAAI,EAAE,KAAR;AAAeC,QAAAA,KAAK,EAALA;AAAf,OAAD,CAAnB;AAAA,KADa;AAElBO,IAAAA,MAAM,EAAE,gBAACP,KAAD;AAAA,aAAWI,QAAQ,CAAC;AAAEL,QAAAA,IAAI,EAAE,QAAR;AAAkBC,QAAAA,KAAK,EAALA;AAAlB,OAAD,CAAnB;AAAA,KAFU;AAGlBQ,IAAAA,GAAG,EAAE,aAACR,KAAD;AAAA,aAAWI,QAAQ,CAAC;AAAEL,QAAAA,IAAI,EAAE,KAAR;AAAeC,QAAAA,KAAK,EAALA;AAAf,OAAD,CAAnB;AAAA,KAHa;AAIlBS,IAAAA,KAAK,EAAE;AAAA,aAAML,QAAQ,CAAC;AAAEL,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAd;AAAA;AAJW,GAApB;AAMA,SAAO,CAACF,KAAD,EAAQQ,WAAR,CAAP;AACD,CAVD;;AAYA,eAAeH,oBAAf","sourcesContent":["import { useReducer } from 'react';\n\nconst checkboxValuesReducer = (state, action) => {\n  switch (action.type) {\n    case 'add':\n      return [...state, action.value];\n    case 'remove':\n      return state.filter(value => value !== action.value);\n    case 'set':\n      return [...action.value];\n    case 'clear':\n    default:\n      return [];\n  }\n};\n\nconst useCheckboxSetValues = (initialState = []) => {\n  const [state, dispatch] = useReducer(checkboxValuesReducer, initialState);\n\n  const dispatchers = {\n    add: (value) => dispatch({ type: 'add', value }),\n    remove: (value) => dispatch({ type: 'remove', value }),\n    set: (value) => dispatch({ type: 'set', value }),\n    clear: () => dispatch({ type: 'clear' }),\n  };\n  return [state, dispatchers];\n};\n\nexport default useCheckboxSetValues;\n"],"file":"useCheckboxSetValues.js"}