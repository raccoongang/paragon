{"version":3,"sources":["../../src/Collapsible/CollapsibleBody.jsx"],"names":["React","useContext","PropTypes","CollapsibleContext","TransitionReplace","CollapsibleBody","children","transitionWrapper","tag","props","isOpen","content","createElement","key","cloneElement","propTypes","node","string","element","defaultProps","undefined"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,kBAAT,QAAmC,uBAAnC;AACA,OAAOC,iBAAP,MAA8B,sBAA9B;;AAEA,SAASC,eAAT,OAEG;AAAA,MADDC,QACC,QADDA,QACC;AAAA,MADSC,iBACT,QADSA,iBACT;AAAA,MAD4BC,GAC5B,QAD4BA,GAC5B;AAAA,MADoCC,KACpC;;AACD,oBAAmBR,UAAU,CAACE,kBAAD,CAA7B;AAAA,MAAQO,MAAR,eAAQA,MAAR,CADC,CAGD;AACA;AACA;;;AACA,MAAMC,OAAO,GAAGD,MAAM,gBAClBV,KAAK,CAACY,aAAN,CAAoBJ,GAApB;AAA2BK,IAAAA,GAAG,EAAE;AAAhC,KAA2CJ,KAA3C,GAAoDH,QAApD,CADkB,gBAElB;AAAK,IAAA,GAAG,EAAC;AAAT,IAFJ;;AAIA,MAAIC,iBAAJ,EAAuB;AACrB,wBAAOP,KAAK,CAACc,YAAN,CAAmBP,iBAAnB,EAAsC,EAAtC,EAA0CI,OAA1C,CAAP;AACD;AACD;;;AACA,sBAAO,oBAAC,iBAAD,QAAoBA,OAApB,CAAP;AACD;;AAEDN,eAAe,CAACU,SAAhB,GAA4B;AAC1B;AACAT,EAAAA,QAAQ,EAAEJ,SAAS,CAACc,IAFM;;AAG1B;AACAR,EAAAA,GAAG,EAAEN,SAAS,CAACe,MAJW;;AAK1B;AACAV,EAAAA,iBAAiB,EAAEL,SAAS,CAACgB;AANH,CAA5B;AASAb,eAAe,CAACc,YAAhB,GAA+B;AAC7Bb,EAAAA,QAAQ,EAAEc,SADmB;AAE7BZ,EAAAA,GAAG,EAAE,KAFwB;AAG7BD,EAAAA,iBAAiB,EAAEa;AAHU,CAA/B;AAMA,eAAef,eAAf","sourcesContent":["import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { CollapsibleContext } from './CollapsibleAdvanced';\nimport TransitionReplace from '../TransitionReplace';\n\nfunction CollapsibleBody({\n  children, transitionWrapper, tag, ...props\n}) {\n  const { isOpen } = useContext(CollapsibleContext);\n\n  // Keys are added to these elements so that TransitionReplace\n  // will recognize them as unique components and perform the\n  // transition properly.\n  const content = isOpen\n    ? React.createElement(tag, { key: 'body', ...props }, children)\n    : <div key=\"empty\" />;\n\n  if (transitionWrapper) {\n    return React.cloneElement(transitionWrapper, {}, content);\n  }\n  /* istanbul ignore next */\n  return <TransitionReplace>{content}</TransitionReplace>;\n}\n\nCollapsibleBody.propTypes = {\n  /** Specifies contents of the component. */\n  children: PropTypes.node,\n  /** Specifies content's base element. */\n  tag: PropTypes.string,\n  /** Specifies transition element. */\n  transitionWrapper: PropTypes.element,\n};\n\nCollapsibleBody.defaultProps = {\n  children: undefined,\n  tag: 'div',\n  transitionWrapper: undefined,\n};\n\nexport default CollapsibleBody;\n"],"file":"CollapsibleBody.js"}