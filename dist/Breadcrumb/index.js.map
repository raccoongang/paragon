{"version":3,"sources":["../../src/Breadcrumb/index.jsx"],"names":["React","PropTypes","classNames","Icon","ChevronRight","Breadcrumb","links","activeLabel","spacer","clickHandler","variant","isMobile","linkCount","length","displayLinks","map","i","url","label","onClick","propTypes","arrayOf","shape","string","isRequired","element","func","oneOf","bool","defaultProps","undefined"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport Icon from '../Icon';\nimport { ChevronRight } from '../../icons';\n\nconst Breadcrumb = ({\n  links, activeLabel, spacer, clickHandler, variant, isMobile,\n}) => {\n  const linkCount = links.length;\n  const displayLinks = isMobile ? [links[linkCount - 1]] : links;\n\n  return (\n    <nav aria-label=\"breadcrumb\" className={classNames('pgn__breadcrumb', `pgn__breadcrumb-${variant}`)}>\n      <ol className={classNames('list-inline', 'd-flex', 'align-items-center', { 'is-mobile': isMobile })}>\n        {displayLinks.map(({ url, label }, i) => (\n          <React.Fragment key={url}>\n            <li className={classNames('list-inline-item')}>\n              <a className=\"link-muted\" href={url} {...(clickHandler && { onClick: clickHandler })}>{label}</a>\n            </li>\n            {(activeLabel || ((i + 1) < linkCount))\n              && (\n              <li className=\"list-inline-item\" role=\"presentation\">\n                {spacer || <Icon src={ChevronRight} id={`spacer-${i}`} />}\n              </li>\n              )}\n          </React.Fragment>\n        ))}\n        {!isMobile && activeLabel && <li className=\"list-inline-item active\" key=\"active\" aria-current=\"page\">{activeLabel}</li>}\n      </ol>\n    </nav>\n  );\n};\n\nBreadcrumb.propTypes = {\n  /** an array of objects with the properties `label` and `url` as strings. */\n  links: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.string,\n    url: PropTypes.string,\n  })).isRequired,\n  /** allows to add a label that is not a link to the end of the breadcrumb.\n   * Defaults to `undefined`.\n */\n  activeLabel: PropTypes.string,\n  /** allows to add a custom element between the breadcrumb items.\n   * Defaults to `>` rendered using the `Icon` component. */\n  spacer: PropTypes.element,\n  /** allows to add a custom function to be called `onClick` of a breadcrumb link.\n   * The use case for this is for adding custom analytics to the component. */\n  clickHandler: PropTypes.func,\n  /** The `Breadcrumbs` style variant to use. */\n  variant: PropTypes.oneOf(['light', 'dark']),\n  /** The `Breadcrumbs` mobile variant view. */\n  isMobile: PropTypes.bool,\n};\n\nBreadcrumb.defaultProps = {\n  activeLabel: undefined,\n  spacer: undefined,\n  clickHandler: undefined,\n  variant: 'light',\n  isMobile: false,\n};\n\nexport default Breadcrumb;\n"],"file":"index.js"}