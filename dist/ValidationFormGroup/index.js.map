{"version":3,"sources":["../../src/ValidationFormGroup/index.jsx"],"names":["React","PropTypes","classNames","Input","FormControl","propTypes","for","string","isRequired","className","invalid","bool","valid","validMessage","node","invalidMessage","helpText","children","defaultProps","undefined","ValidationFormGroup","props","id","renderChildren","Children","map","child","indexOf","type","cloneElement","Boolean","renderHelpText","text","renderInvalidFeedback","message","renderValidFeedback"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Input from '../Input';\nimport FormControl from '../Form/FormControl';\n\nconst propTypes = {\n  /** Id of the form input that the validation is for */\n  for: PropTypes.string.isRequired,\n  /** Additional classnames for this component */\n  className: PropTypes.string,\n  /** Determines if invalid styles / message will be shown */\n  invalid: PropTypes.bool,\n  /** Determines if invalid styles / message will be shown */\n  valid: PropTypes.bool,\n  /** Message to display on valid input */\n  validMessage: PropTypes.node,\n  /** Message to display on invalid input */\n  invalidMessage: PropTypes.node,\n  /** Help text for the form input */\n  helpText: PropTypes.node,\n  children: PropTypes.node,\n};\n\nconst defaultProps = {\n  invalid: undefined,\n  valid: undefined,\n  validMessage: undefined,\n  invalidMessage: undefined,\n  helpText: undefined,\n  children: undefined,\n  className: undefined,\n};\n\nfunction ValidationFormGroup(props) {\n  const {\n    className,\n    invalidMessage,\n    invalid,\n    valid,\n    validMessage,\n    helpText,\n    for: id,\n    children,\n  } = props;\n\n  const renderChildren = () => React.Children.map(children, (child) => {\n    // Any non-user input element should pass through unmodified\n    if (['input', 'textarea', 'select', Input, FormControl].indexOf(child.type) === -1) { return child; }\n\n    // Add validation class names and describedby values to input element\n    return React.cloneElement(child, {\n      className: classNames(child.props.className, {\n        'is-invalid': invalid,\n        'is-valid': valid,\n      }),\n      // This is a non-standard use of the classNames package, but it's exactly the same use case.\n      'aria-describedby': classNames(child.props['aria-describedby'], {\n        [`${id}-help-text`]: Boolean(helpText),\n        [`${id}-invalid-feedback`]: invalid && invalidMessage,\n        [`${id}-valid-feedback`]: valid && validMessage,\n      }),\n    });\n  });\n\n  const renderHelpText = (text) => {\n    if (!text) { return null; }\n    return <small id={`${id}-help-text`} className=\"form-text text-muted\">{text}</small>;\n  };\n\n  /**\n   * The red text conveys semantic emphasis using color and font weight. For WCAG 2.1, the\n   * semantics need to be exposed programmatically as well. To do this, we use <strong/>\n   * elements and attach the formatting classes to them.\n   */\n  const renderInvalidFeedback = (message) => {\n    if (!message) { return null; }\n    return (\n      <strong\n        id={`${id}-invalid-feedback`}\n        className=\"invalid-feedback\"\n      >\n        {message}\n      </strong>\n    );\n  };\n\n  const renderValidFeedback = (message) => {\n    if (!message) { return null; }\n    return (\n      <div\n        className=\"valid-feedback\"\n        id={`${id}-valid-feedback`}\n      >\n        {message}\n      </div>\n    );\n  };\n\n  return (\n    <div className={classNames('form-group', className)}>\n      {renderChildren()}\n      {renderHelpText(helpText)}\n      {renderInvalidFeedback(invalidMessage)}\n      {renderValidFeedback(validMessage)}\n    </div>\n  );\n}\n\nValidationFormGroup.propTypes = propTypes;\nValidationFormGroup.defaultProps = defaultProps;\n\nexport default ValidationFormGroup;\n"],"file":"index.js"}